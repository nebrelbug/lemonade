// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ROBOTC function and variable definitions.
// V4.53                                                                                                                                  
// Dec 2015     Pad with spaces only, no tabs.  Use \n as CR in tooltips                                                                  M
// Rev 4.53.3.0 (Feb 28 2015)                                                                                                          G  E
//                                                                                                                                     R  N
// Category                   Sub category        Platforms      Feature restriction 1                   Feature restriction 2         A  U    Function or variable          Tooltip
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
Advanced,                     Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bResetFromWatchdogTimeout     //Flag that indicates the cortex was reset by the watchdog timer.
Advanced,                     Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nWatchdogTimeoutInterval      //The current value of the watchdog timeout.

Battery & Power Control,      Commands,           NV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   alive();                      //Periodically calling this function will reset the timer used to put the controller to sleep after long periods of keyboard inactivity.
Battery & Power Control,      Commands,           NV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   powerOff();                   //Immediately powers off the controller.
Battery & Power Control,      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setPowerDownTimer(minutesUntilSleep);//Set Minutes to sleep [0..120min]
Battery & Power Control,      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getPowerDownTimer();          //Get Minutes to sleep [0..120min]
Battery & Power Control,      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getBatteryVoltage();          //Get battery voltage
Battery & Power Control,      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getBatteryCurrent();          //Get battery current

Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bNoPowerDownOnACAdaptor       //Boolean variable. When true, and controller is connected to an AC adapter, the sleep timer will be disabled.
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bNxtRechargable               //Boolean variable. Indicates whether the NXT is currently using a rechargeable battery pack.
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   externalBattery               //Instantaneous battery voltage (in millivolts) for external 12V battery used to power HiTechnic controllers.\n\nA value of -1 is returned if the external battery cannot be read. Only the HiTechnic Motor Controller has battery monitoring capabilities. The HiTechnic Servo Controller cannot monitor battery. So at least one Motor Controller is required for the battery monitoring capability.
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   externalBatteryAvg            //Average battery voltage (in millivolts) for external 12V battery used to power HiTechnic controllers.\n\nA value of -1 is returned if the external battery cannot be read. Only the HiTechnic Motor Controller has battery monitoring capabilities. The HiTechnic Servo Controller cannot monitor battery. So at least one Motor Controller is required for the battery monitoring capability. \n
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   LowVoltageBatteryCountLimits  //The NXT will generate a 'low voltage' pop up menu on its display when 'N' consecutive battery voltage samples are at a low voltage. 'N' is the 'LowVoltageBatteryCountsLimits' variable.\n\nIf the value is zero then the pop up window is disabled.
Battery & Power Control,      Variables,          NEA,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nAvgBatteryLevel              //The average battery level in millivolts. A value of 9458 represent 9.458 volts.\n\nIt's the average of several recent samples and smooths out sudden voltage transients.
Battery & Power Control,      Variables,          NEA,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nImmediateBatteryLevel        //The last sampled battery level in millivolts. A value of 9458 represent 9.458 volts.
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nPowerDownDelayMinutes        //Specifies the number of minutes of inactivity (i.e. no buttons pressed) used by the sleep timer for automatic power off of controller.\n\nValues outside the range 0 to 255 are truncated to an unsigned byte value.\n\nValue 255 is special and indicates that the 'value should not be updated'. This allows the ROBOTC IDE to download a value to the firmware without actually causing an update.\n\nThe controller automatically powers off to conserve batteries. If you have a long running program, you may find that it will power off in the middle of operation. Calling the 'alive()' function within your program will reset the power off timer to prevent this.
Battery & Power Control,      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nPowerDownDelayMinutesDefault //
Battery & Power Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nAvgBatteryLevel              //Returns the average voltage level of the main VEX battery.
Battery & Power Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   BackupBatteryLevel            //Returns the current voltage level of the VEX backup battery.
Battery & Power Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nImmediateBatteryLevel        //Returns the current voltage level of the main VEX battery.

Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btConnect(nPort, sFriendlyName);//Attempts to connect BT device with specified 'sFriendlyName' on port 'nPort'. \n\nPort should be in the range 1 to 3.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btDisconnect(nPort);          //This function will disconnect a single existing Bluetooth connection on the NXT. 'nPort' ranges from 0 to 3.\n\nPort 0 is used if this is a 'slave' Bluetooth device. Ports 1 to 3 are used when this is a 'master' Bluetooth device and are for the three possible slaves.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btDisconnectAll();            //This function disconnects all existing Bluetooth connections on the NXT.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btFactoryReset();             //This command will reset the NXT's Bluetooth module to the default factory settings.\n\nAll existing connections are disconnected. The 'My Contacts' list is emptied. Any existing paired connections are lost.\n\nThis command is used for restoring the NXT Bluetooth operation to its original condition. It's really only needed because its possible the Bluetooth hardware gets confused and in an inconsistent state and this is a method of 'last resort' to recover.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   btGetMyContactsEntry(nIndexInList, nInfo);//
Bluetooth,                    Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   BTOpcdFcn(function);          //Internal Macro
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btRemoveDevice(sFriendlyName);//Removes a device with the specified 'sFriendlyName'  from the 'My Contacts' list.\n\nRemoving a device will erase the 'paired connection' for the device.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btRequestLinkQuality(nPort);  //Requests the current BT link quality from a specific port. The function returns immediately before the link quality has been retrieved.\n\nThe NXT CPU will send a message to the Bluetooth module requesting the data. The data is then returned to the NXT CPU within a few 100 milliseconds.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btSearch();                   //Begins a search for BT devices and adds new entries to the 'My Contacts' lists.\n\nThe search can take up to 30 seconds to perform. 'btSearch' function returns immediately. Application code should continuously check the status to wait for the search to complete.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   btSendMessage(nPort, nXmitLength, nXmitBuffer, bWaitForReply);//Internal only.\n\n'Raw' send of a Fantom command over the BT link. The application program is responsible for the (complicated) proper formatting of the message.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   btStopSearch();               //This function terminates an existing search on the NXT.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdBTCheckStatus(nStream);   //Used to check the status of the BT.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdBTPurgeRcvBuffer();       //Used to purge data from the BT input buffer.\n\nNormally application program would not need to use this command.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdMessageAddToQueue(nQueueID, pData, nLength);//Adds the message at 'pData' to queue 'nQueueID'. 'nLength' is the length of the message.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdMessageGetSize(nQueueID); //Returns the size of the message at the head of queue 'nQueueID'. \n\nA non-zero value indicates that a message is available in the NXT's queue of received messages. A zero value indicates that the queue is empty.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdMessageRead(pData, nLengthToRead, nQueueID);//Reads a Bluetooth message from 'nQueueID'.\n\nThe message data is stored in the buffer at 'pData'. 'nLengthToRead' is the maximum number of bytes to read -- it is used to prevent overwriting beyond the length of the buffer at 'pData'.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdMessageWriteToBluetooth(nStream, pData, nLength, nQueueID);//Writes a Bluetooth message to 'nQueueID'. \n\nThe message will be written to the specified 'port' or 'nStream' which should be in the range of 0 to 3. This command is only useful when multiple ports are simultaneously open on the NXT; a configuration that is not recommended because of the much slower communications when multiple ports are in use.\n\nThe message data is taken from the buffer at 'pData'. 'nLength' is the number of bytes in the message; the maximum length is 58 bytes.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdMessageWriteToBluetooth(pData, nLength, nQueueID);//Writes a Bluetooth message to 'nQueueID'. \n\nThe message will be written to the currently open stream; the ROBOTC firmware will automatically determine the 'port' or 'stream' to use. This allows the same function call to be used at both slave (port is always 0) or master (port is one of 1 to 3) devices.\n\nThe message data is taken from the buffer at 'pData'. 'nLength' is the number of bytes in the message; the maximum length is 58 bytes.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdRawSendToBluetooth(nStream, pData, nLength);//Sends 'raw bytes' out on  the indicated stream.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   cCmdRawSendToBluetooth(pData, nLength);//Sends 'raw bytes' over the current Bluetooth stream.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getBTAddress(btAddr);         //Retrieves the Bluetooth address of the NXT.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDefaultPIN(passCode);      //Function retrieves the default BT passcode stored in flash.\n\nImmediately after firmware download, the default is set to '1234'. ROBOTC has a function that will let you redefine the default port; either for a single power on session or on a permanent basis.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDeviceAddr(nResult, nHandle, sAddr);//Gets the Device Address for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDeviceClass(nHandle, sCOD);//Gets the Device Class for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDeviceName(nHandle, sName);//Gets the Device Name for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDeviceStatus(nHandle, nStatus);//Gets the Device Status for the BT device in the contacts/connection list indicated by 'hHandle'
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getFirstDevice(nResult, nHandle);//Returns a 'handle' to the first device in the BT 'contacts' list.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getFriendlyName(sName);       //Copies the 'friendly name' for a NXT to a string variable.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getNextDevice(nResult, nHandle);//Returns a 'handle' to the next device in the BT 'contacts' list.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getPortName(nResult, nPort, sPortName);//Gets the name of the device connected on port 'nPort'
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getSessionPIN(passCode);      //Function retrieves the 'session' BT passcode stored in RAM. Upon power up, the default passcode is copied to the 'session' passcode. Whenever firmware needs a BT passcode, it uses the current setting of the 'session' passcode.\n\nF/W needs passcode for initializing the manual entry passcode. Also needs passcode if the 'use default (i.e. session) passcode without entering manually' variable is set.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nxtReadRawBluetooth(pData, nMaxBufferSize);//Function used to read 'raw' data bytes from the Bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read. \n \n The data is retrieved from the currently open 'port' or 'stream'.\n\nA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined 'Fantom' messaging protocol. \n \n Raw data transmission should only be used when there is a single BT connection on the NXT.\n\nThe function 'setBluetoothRawDataMode()' needs to be called to setup raw transmission.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nxtWriteRawBluetooth(nStream, pData, nLength);//Function used to write 'raw' data bytes from the Bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read.\n\nThe data is sent to the specified 'nSstream'.\n\nA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined 'Fantom' messaging protocol.\n\nRaw data transmission should only be used when there is a single BT connection on the NXT.\n\nThe function 'setBluetoothRawDataMode()' needs to be called to setup raw transmission.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nxtWriteRawBluetooth(pData, nLength);//Function used to write 'raw' data bytes from the Bluetooth module. 'pData' is the location of buffer where bytes should be stored and 'nMaxBufferSize' is the size of this buffer. The returned value is the number of bytes that was actually read.\n\nThe data is sent to the currently open 'port' or 'stream'.\n\nA typical use of this advanced function is for communicating with devices -- like a BT enabled GPS receiver -- that do not follow the LEGO defined 'Fantom' messaging protocol.\n\nRaw data transmission should only be used when there is a single BT connection on the NXT.\n\nThe function 'setBluetoothRawDataMode()' needs to be called to setup raw transmission.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   resetSessionPIN();            //Function resets the default BT passcode stored in RAM to the default value stored in flash.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sendMessageNew(nMessageID);   //Internal function.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sendMessageOld(nMessageID);   //Internal function.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBluetoothOff();            //This function turns the Bluetooth module OFF.\n\nSetting BT off will disconnect any existing connections.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBluetoothOn();             //This function turns the Bluetooth module ON.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBluetoothRawDataMode();    //This function sets the NXT Bluetooth configuration to 'raw data transmission' mode. When in 'raw mode' the LEGO defined higher level protocol (i.e. Fantom messages) is disabled and the application program can directly 'read' and 'write' bytes over an existing Bluetooth connection. \n \n 'raw mode' can only be exited by the NXT firmware when an application program terminates execution.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBluetoothVisibility(bBluetoothVisible);//This functions makes the NXT 'visible' or 'invisible' to search requests from other bluetooth devices.\n\nConnections can still be made to an 'invisible' device as long as the far end device already knows the BT address of the device.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBluetoothVisibility(nResult, bBluetoothVisible);//Sets whether the NXT BT is visible or invisible to searches from other Bluetooth devices
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setDefaultPIN(nResult, sPIN); //Sets a default PIN to use for Bluetooth connections (future)
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setDefaultPIN(passCode);      //Function sets the default BT passcode stored in flash.\n\nImmediately after firmware download, the default is set to '1234'. This function allows you to change the default. The new default value is 'permanent'; it is retained until the firmware is reloaded.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setFriendlyName(nResult, sFriendlyName);//Sets the 'friendly name' that a NXT will be known by. Displayed on the top status line of the NXT LCD.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setFriendlyName(sFriendlyName);//This function is used to set the 'friendly name' of the NXT.\n\nThis is the name displayed centered on the top line of the NXT's LCD display.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setSessionPIN(passCode);      //Function sets the 'session' BT passcode stored in RAM. Upon power up, the default passcode is copied to the 'session' passcode. Whenever firmware needs a BT passcode, it uses the current setting of the 'session' passcode.\n\nFirmware needs a passcode for initializing the manual entry passcode. Also needs passcode if the 'use default (i.e. session) passcode without entering manually' variable is set.
Bluetooth,                    Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   transferFile(nPort, sFileName);//Transfers the file 'sFileName' from this NXT to the NXT connected to port 'nPort'

Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   bBTBusy                       //Read-only boolean variable that indicates whether Bluetooth is currently busy processing a command.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bBTDebugTrace                 //Boolean variable for advanced users.\n\nEnables output of a debug trace of Bluetooth activity to the 'Debug Stream' debugger output window.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   bBTHasProgressSounds          //Boolean variable that enables or disables sound feedback on Bluetooth connect / disconnect and failure activities.\n\nDepending on whether a connection is 'paired' connect and disconnect activities can occur silently. This variable will enable audible output to inform you of these actions.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bBTOptimizePerformance        //Boolean variable used to indicate whether Bluetooth transmission performance should be optimized. Optimized performance may not be compatible with other devices not programmed via ROBOTC.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bBTRawMode                    //Read-only variable that can be used to test whether NXT Bluetooth is currently in 'raw data transmission mode'. \n\nWhen in 'raw mode' the LEGO defined higher level protocol (i.e. Fantom messages) is disabled and the application program can directly 'read' and 'write' bytes over an existing Bluetooth connection.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   bBTSkipPswdPrompt             //Boolean variable used to indicate whether manual entry of Bluetooth password should be disabled. \n\nIf set, then the default value stored in  RAM (see the set/get session passcode functions will always be used.\n\nPassword entry using the NXT buttons and LCD can be awkward. This is a convenient way to bypass this entry if you're always going to use the same passcode.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   bBTVisble                     //Read-only boolean variable that indicates whether Bluetooth is 'visible' (true) or 'invisible' (false)
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kDefaultBTQueue               //Constant used for the default messaging queue (i.e. 0).
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kMaxMyContacts                //
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nBluetoothCmdStatus           //Gets the status/progress of the last BT issued 'command'.\n\nCan be used to check whether the command is still in progress. Once completed the status contains the success or fail status of the command.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nBluetoothState               //Gets the current BT state.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nBTAvailOutSize               //
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nBTCurrentStreamIndex         //Read-only variable containing the current active stream index. Value 0 is used for slave Bluetooth devices. Value 1 to 3 is used for the three possible devices that can be connected on a master BT device. Value -1 is used if BT if there are no current BT connections. This variable is useful for checking if there is a current BT connection and whether the device is master or slave.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nBTLinkQuality[]              //This array (range 0 to 3) returns the last polled link quality of one of the BT connections. The value ranges from 0 to 255. You must first call the 'btRequestLinkQuality(nPort)' function to poll the link quality from the NXT.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nBTStreamSwitchDelay          //Integer variable containing the delay interval used when switching Bluetooth from DATA to CMD mode.
Bluetooth,                    Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nLastBTCommand                //Gets the last command processed by the Bluetooth firmware.

Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   anyButtonBumped(button, pressed);//Has any button been pressed and released'
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBlockBackButton(bBlocked); //Set UI 'back' button blocked flag'
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getBlockBackButton();         //Get UI 'back' button blocked flag
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   anyButtonClicked(clicked);    //Has any button been clicked (i.e. pressed and released)
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   checkForButtonLongPress(button);//Check if button has been 'pressed'. Clears 'pressed' flag.
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   checkForButtonPress(button);  //Check if button has been 'long pressed'. Clears 'long pressed' flag.
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   flushButtonMessages();        //Flush unprocessed button messages
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   generateButtonPress(button);  //Generate button press
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   generateButtonRelease(button);//Generate button release
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getButtonPress(button);       //Get current state of a button
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getButtonState(button, pressed);//Get current state of a button
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getHorizontalArrows(nResult); //get Horizontal arrows (-1, 0, +1)
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getVerticalArrows(nResult);   //get Vertical arrows (-1, 0, +1)
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   testForButtonPress(button);   //Check if button has been 'pressed'. Does not clear 'pressed' flag.
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   testForButtonLongPress(button);//Check if button has been 'long pressed'. Does not clear 'long pressed' flag.
Buttons,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   waitForButtonPress();         //Wait for key press

Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kNoButton                     //Constant. Value of 'nNxtButtonPressed'when no button is pressed.
Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNxtButtonPressed             //Contains the number (0 to 3) of the button that is currently depressed. \n\n-1 indicates no button is currently pressed.\n\nNote that only one button press can be recognized at a time. This is a limitation in the NXT hardware. It is unable to recognize multiple button presses.
Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNxtButtonTask                //The variable serves two purposes. A negative value (default is  -1) indicates that the standard firmware processing of NXT buttons should be used. Values in the range of 0 or higher indicates that application program will process buttons.\n\nIf the value is in the range 0 to 9 (i.e. a valid task number) then this task will be started (or restarted) whenever a button press is detected.\n\n
Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNxtButtonTransition          //
Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNxtExitClicks                //Holds the number of 'clicks' of the EXIT button required to abort a program. Default value is one for compatibility with standard firmware.\n\nThis variable allows end user programs to use the EXIT button. If you set the variable to 'N' (where 'N' is greater than 1) then the first 'N-1' consecutive clicks of the EXIT button can be handled by the application program. On the N-th consecutive click the firmware will automatically EXIT (i.e. end)  your program.\n\nHaving the firmware perform the check ensures that, even if there is an error in your program, you can always EXIT your program. But it also easily allows your program to have access to the EXIT button.\n\nNOTE: With the standard NXT-G firmware, the EXIT button is not accessible to your program!
Buttons,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nNxtRemoteButton              //This is an internal variable used by ROBOTC's 'NXT Remote Desktop' feature. It should not be used by the non-experienced users.\n\nWhen the value is non-negative it allows simulation of pressing one of the four NXT buttons and will override the actual state of which button is pushed.

Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   GetCameraConfig(config);      //Internal procedure used to setup the camera configuration. This function is automatically called by the compiler. It is triggered by the presence of '#pragma camera(....)' statements in the source program.
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   GetTrackingParms(myData);     //Obtains detailed information about the camera and copies to the 'myData' variable. The robot is constantly received tracking 'packets' from the camera. The function will obtain the last complete packet received and copy it to a user variable. Once copied, the user program can work with these variables.
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ResetCameraConfigurationToDefault();//Advanced function to return the internal parameters used to set up the camera.
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SetCameraConfig(config);      //Internal procedure used to setup the camera configuration. This function is automatically called by the compiler. It is triggered by the presence of '#pragma camera(....)' statements in the source program.
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SetTrackingParms(config);     //
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   StartCamera();                //Starts the CMUCAM operation. The compiler automatically generates this code as part of the main task prolog whenever  '#pragam camera(....) statements are detected in the program.
Camera,                       Commands,           NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   StopCamera();                 //Stops the CMUCAM operation. The compiler automatically generates this code as part of the main task epilog whenever ' #pragam camera(....) statements are detected in the program.
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bStreamCameraIOToPC           //Internal variable to indicate that camera data is not processed within the robot firmware but is simply 'streamed' (or redirected) to the communications port to the PC.
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nCameraConfidence             //This is an indication of the 'confidence' of the tracking data. A value of zero indicates that the tracking data (horizontal and vertical) is not valid -- i.e. the color being traced was not found anywhere in the camera image. \n \n A high value indicates that pixels matching the tracked color were concentrated in a single region rather than spread out throughout the camera image. \n
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nCameraHorizontal             //The horizontal position of the tracked color blob.  A value of zero is the center position of the camera view. \n\nThis value is the 'weighted average' vertical position of the pixels that matched the tracked color.
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nCameraStatus                 //nCameraFields[amTrackingStatus] is the current status of the camera. It indicates the 'health' of the camera and can be one of the values: \n  camStatusInactive                        Camera is not active \n  camStatusNoResponse                 Camera is not responding \n  camStatusSettingRegisters           ROBOTC firmware is initializing the internal camera registers. \n  camStatusSettingResolution         ROBOTC firmware is initializing the camera resolution \n  camStatusDownloadingConfig       ROBOTC firmware is initializing the camera color tracking \n  camStatusTracking                        Camera is tracking colors and reporting results to ROBOTC firmware \n  camStatusShutdown                      ROBOTC firmware is shutting down the camera.
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nCameraTrackingPackets        //The number of tracking packets that have been received from the camera.\n\nThis field is incremented by one every time ROBOTC receives a 'color tracking packet' from the camera. The packet is several bytes and reports the location of the tracked color within the camera's scanned image. \n
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nCameraVertical               //The vertical position of the tracked color blob. A value of zero is the center position of the camera view.\n\nThis value is the 'weighted average' vertical position of the pixels that matched the tracked color.
Camera,                       Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   trackingData                  //

Datalog,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getFilenameTotalSize(pFileName, numbOfFiles, totalSize);//

Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogAddValue(nDataSeries, nDataValue);//Add a value to the datalog on the specified column. Columns are numbered from 0.
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogAddValueWithTimeStamp(nDataSeries, nDataValue);//Add a value to the datalog on the specified column with a time stamp. Columns are numbered from 0.
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogClear();               //Clear all entries in the datalog
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogDataGroupStart();      //Start a group of entries in the datalog that will have the same timestamp
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogDataGroupEnd();        //End a group of entries in the datalog that will have the same timestamp
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogBackgroundPollingPause();//Pause polling of the datalog entries defined by Motors&Sensors setup
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   datalogBackgroundPollingResume();//Resume polling of the datalog entries defined by Motors&Sensors setup
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   datalogDefineDataPointName(nDataSeries, sDataName);//not implemented
Datalog,                      Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   UploadDatalog(nSize);         //internal use by debugger

Datalog,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bHideDataFiles                //Boolean flag to indicate whether data files should be hidden or shown in the NXT GUI
Datalog,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMaxDataFiles                 //Maximum number of saved datalog files (DATAnnnn.RDT) allowed on a NXT. If you try to store additional files, then the oldest previous datalog file is deleted
Datalog,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMaxDataFileSize              //Maximum size (in 100 byte units) of all datalog files saved on the NXT. If you exceed this value with a new file, then older datalog files are deleted to make space.
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nDatalogBufferSize            //The size of the VM datalog buffer.\nRead only.\n
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNumbOfDatalogSeries          //Number of datalog series.\nread only
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bDatalogPolling               //Indicates if datalog polling is enabled.\nread only
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nDatalogStatus                //Status of the datalog.  The number of series enabled is in the low 8 bits, polling status is bit 8.\nread only
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNumbOfDatalogBytesAvailToRead//Number of bytes queued in the datalog buffer.\nread only
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNumbOfDatalogResets          //The number of times the datalog has been reset\nread only
Datalog,                      Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nNumbOfDatalogOverruns        //The number of characters that have been lost from the datalog buffer.\nread only


Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ArrayBoundCheck(nRunTimeValue, nRange);//Internal variables.
Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   assert();                     //Internal variables.
Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   ASSERT(assertVar);            //Macro command used during debugging to catch unexpected/illegal conditions. Causes an exception and program abort when 'assertVar' is true.
Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   VERIFY(assertVar);            //Macro command used during debugging to catch unexpected/illegal conditions. Causes an exception and program abort when 'assertVar' is true.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   debugPrint(format, parm1, parm2);//obsolete. Formats a string and prints it to the debug 'stream' window on the PC.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   debugPrintLine(format, parm1, parm2);//obsolete. Formats a string and prints it to the debug 'stream' window on the PC. Once printed then starts a new line in the window.
Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   Set(nDestinationVariable, nSourceVariable);//Internal variables.
Debug,                        Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setBreakpoint(breakNumb, memoryIndex, nOffsetInSub);//Internal variables.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   clearDebugStream();           //Erase the contents of the debug stream on the robot controller.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeDebugStream(sFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeDebugStream(pzFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   writeDebugStream(sFormatString);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   writeDebugStream(pzFormatString);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeDebugStreamLine(sFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeDebugStreamLine(pzFormatString, ...);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   writeDebugStreamLine(sFormatString);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   writeDebugStreamLine(pzFormatString);//This is an advanced feature. It allows writing strings to the robot's debug stream. The debug stream is polled by the ROBOTC IDE and displayed in a text window in ROBOTC's IDE.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getAvailSpaceInDebugStream(); //This function returns the amount of available space in the debug stream.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setUserExceptionType1();      //Throw exception of type user 1.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setUserExceptionType2();      //Throw exception of type user 2.
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setUserExceptionType3();      //Throw exception of type user 3.
Debug,                        Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   throwBadSensorPortException();//
Debug,                        Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setException(nExceptionType); //Force an exception of the type nExceptionType.
Debug,                        Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bFloatConversionErrors        //When true, this variable will generate an exception if an out of range error occurs when converting a 'float' value to an integer. The default value is no exception.\n\nROBOTC converts out of range float values to the largest possible integer value.
Debug,                        Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nDebugTaskMode                //Internal variables.

Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   clearLCDLine(nLine);          //Clears the indicated line of the VEX LCD to blanks
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   displayFileName(nLine, nSlot);//Displays the name of the file in file directory at slot 'nSlot'
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDCenteredString(nLine, sString);//Displays a character string centered on the indicated line of the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDCenteredString(nLine, pzString);//Displays a character string centered on the indicated line of the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDChar(nLine, nPos, cChar);//Displays a specific character on the VEX LCD at the specified position
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDNumber(nLine, nPos, nValue, nPrecision);//Displays an integer on the VEX LCD at the specified position
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setLCDPosition(nLine, nPos);  //Sets the next display position on the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   displayLCDPos(nLine, nPos);   //Sets the next display position on the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDString(nLine, nPos, sString);//Displays a character string on the VEX LCD at the specified position
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayLCDString(nLine, nPos, pzString);//Displays a character string on the VEX LCD at the specified position
Display,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bLCDBacklight                 //Turns the back-light on the VEX LCD on or off.
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayNextLCDChar(cChar);    //Displays a specific character on the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayNextLCDNumber(nValue, nPrecision);//Displays an integer number on the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayNextLCDString(sString);//Displays a character string on the VEX LCD
Display,                      Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   displayNextLCDString(pzString);//Displays a character string on the VEX LCD
Display,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nLCDRefreshRate               //Returns the refresh rate (how often the LCD is refreshed) for the LCD display.\nThis is a read only variable.\n\n

Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setUserDebugWindow(bSetting); //Enable or disable the Debug screen.\n\nbSetting is true or false to enable the debug screen.\nWhen set to false user display is disabled and program running time displayed.\nThis is an advanced function and should not normally be used.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseDisplay();               //Erases the complete LCD display
Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseUserScreenArea();        //Erases the user area of the LCD display
Display,                      Commands,           NEV3,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, S,   getLcdScreenSize(X, Y);       //Read the width and height of the LCD screen.\n\nparameters\nX reference to short integer.\nY reference to short integer.\n\nexample:\n\nshort x, y;\ngetLcdScreenSize( x, y );

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayString(nLineNumber, pChar, ...);//Formats a text string and displays it on one of the possible text lines.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayString(nLineNumber, sFormatString, ...);//Formats a text string and displays it on one of the possible text lines.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayString(nLineNumber, pChar);//Displays a text string on one of the possible text lines.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayString(nLineNumber, sFormatString);//Displays a text string on one of the possible text lines.

Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawUserTextLine(nTextLine, pFormatSpec);//Not used\nThis became a definition
Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   drawUserTextLine(nTextLine, pFormatSpec, ...);//Not used\nThis became a definition
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayTextLine(nLineNumber, pChar, ...);//Formats a text string and displays it on one of the possible text lines. The remainder of the line is padded with blanks.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayTextLine(nLineNumber, sFormatString, ...);//Formats a text string and displays it on one of the possible text lines. The remainder of the line is padded with blanks.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayTextLine(nLineNumber, sString);//Displays a text string on one of the possible text lines. The remainder of the line is padded with blanks.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayTextLine(nLineNumber, pChar);//Displays a text string on one of the possible text lines. The remainder of the line is padded with blanks.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayTextLine(nLineNumber, sFormatString);//Displays a text string on one of the possible text lines. The remainder of the line is padded with blanks.

Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseString(nLineNumber, pChar, ...);//Formats a text string and displays it on one of the possible text lines using inverted colors.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseString(nLineNumber, pChar);//Displays a text string on one of the possible text lines using inverted colors.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseString(nLineNumber, sFormatString, ...);//Formats a text string and displays it on one of the possible text lines using inverted colors.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseString(nLineNumber, sFormatString);//Displays a text string on one of the possible text lines using inverted colors.

Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseTextLine(nLineNumber, pChar);//Formats a text string and displays it on one of the possible text lines using inverted colors. The remainder of the line is padded with blanks.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseTextLine(nLineNumber, sFormatString);//Formats a text string and displays it on one of the possible text lines using inverted colors. The remainder of the line is padded with blanks.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayInverseTextLine(nLineNumber, pChar, ...);//Displays a text string on one of the possible text lines using inverted colors.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayInverseTextLine(nLineNumber, sFormatString, ...);//Displays a text string on one of the possible text lines using inverted colors.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigTextLine(nLineNumber, pChar, ...);//Formats a text string and displays it on two consecutive text lines. The remainder of the line is padded with blanks. \nLarge double height font is used the display is twice the size of normal size font.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigTextLine(nLineNumber, sFormatString, ...);//Formats a text string and displays it on two consecutive text lines. The remainder of the line is padded with blanks. \nLarge double height font is used the display is twice the size of normal size font.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigTextLine(nLineNumber, sString);//Displays a text string on two consecutive text lines. The remainder of the line is padded with blanks.\nLarge double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayBigTextLine(nLineNumber, pChar);//Displays a text string on two consecutive text lines. The remainder of the line is padded with blanks.\nLarge double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayBigTextLine(nLineNumber, sFormatString);//Displays a text string on two consecutive text lines. The remainder of the line is padded with blanks.\nLarge double height font is used the display is twice the size of normal size font.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredTextLine(nLineNumber, pChar, ...);//Formats a text string and displays it on one of the possible text lines. The text is horizontally centered on the LCD display.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format strin
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredTextLine(nLineNumber, sFormatString, ...);//Formats a text string and displays it on one of the possible text lines. The text is horizontally centered on the LCD display.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredTextLine(nLineNumber, sString);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayCenteredTextLine(nLineNumber, pChar);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayCenteredTextLine(nLineNumber, sFormatString);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredBigTextLine(nLineNumber, pChar, ...);//Formats  a text string and displays it on two consecutive text lines. The text is horizontally centered on the LCD display.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string. Large double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredBigTextLine(nLineNumber, sFormatString, ...);//Formats  a text string and displays it on two consecutive text lines. The text is horizontally centered on the LCD display.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string. Large double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayCenteredBigTextLine(nLineNumber, sString);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display. Large double height font is used; the display is twice the size of normal size font
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayCenteredBigTextLine(nLineNumber, pChar);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display. Large double height font is used; the display is twice the size of normal size font
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayCenteredBigTextLine(nLineNumber, sFormatString);//Displays a text string on one of the possible text lines. The text is horizontally centered on the LCD display. Large double height font is used; the display is twice the size of normal size font

Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawUserText(nPixelRow, nPixelColumn, pFormatSpec);//Not used\nThis became a definition
Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   drawUserText(nPixelRow, nPixelColumn, pFormatSpec, ...);//Not used\nThis became a definition
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayStringAt(xPos, yPos, pChar, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayStringAt(xPos, yPos, sFormatString, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayStringAt(xPos, yPos, sString);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayStringAt(xPos, yPos, pChar);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayStringAt(xPos, yPos, sFormatString);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigStringAt(xPos, yPos, pChar, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display.\nLarge double height font is used the display is twice the size of normal size font.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigStringAt(xPos, yPos, sFormatString, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display.\nLarge double height font is used the display is twice the size of normal size font.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayBigStringAt(xPos, yPos, sString);//Displays a text string at (xPos, yPos) coordinate on the LCD display.\nLarge double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayBigStringAt(xPos, yPos, pChar);//Displays a text string at (xPos, yPos) coordinate on the LCD display.\nLarge double height font is used the display is twice the size of normal size font.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayBigStringAt(xPos, yPos, sFormatString);//Displays a text string at (xPos, yPos) coordinate on the LCD display.\nLarge double height font is used the display is twice the size of normal size font.

Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseStringAt(xPos, yPos, pChar, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseStringAt(xPos, yPos, sFormatString, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\n\n'sFormatString' is the format string to use followed by optional parameters that can be used within the format string
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseStringAt(xPos, yPos, pChar);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseStringAt(xPos, yPos, sFormatString);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.

Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseBigStringAt(xPos, yPos, pChar, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\nLarge double height font is used the display is twice the size of normal size font.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayInverseBigStringAt(xPos, yPos, sFormatString, ...);//Formats a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\nLarge double height font is used the display is twice the size of normal size font.\n\n'sFormstString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayInverseBigStringAt(xPos, yPos, pChar);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\nLarge double height font is used the display is twice the size of normal size font.
Display,                      Commands,           EV3A,          feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   displayInverseBigStringAt(xPos, yPos, sFormatString);//Displays a text string and displays it at (xPos, yPos) coordinate on the LCD display using inverted colors.\nLarge double height font is used the display is twice the size of normal size font.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayClearTextLine(nLineNumber);//Erases a line of text. 'nLineNumber' specifies one of the possible text lines.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   scrollText(pChar, ...);       //Shift the LCD image up one line. Then it formats a text string and displays it on the bottom line of the LCD text screen.\n\n'pChar' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   scrollText(sFormatString, ...);//Shift the LCD image up one line. Then it formats a text string and displays it on the bottom line of the LCD text screen.\n\n'sFormstString' is the format string to use followed by optional parameters that can be used within the format string.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   scrollText(pChar);            //Shift the LCD image up one line. Then it displays a text string on the bottom line of the LCD text screen.\n\n'pChar' is the display string to use.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   scrollText(sFormatString);    //Shift the LCD image up one line. Then it displays a text string on the bottom line of the LCD text screen.\n\n'sFormatString' is the display string to use.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   clearPixel(xPos, yPos);       //Clears a single pixel on the LCD screen at the location xPos, yPos.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   getPixel(xPos, yPos);         //Get the value of the pixel at the location xPos, yPos on the LCD screen.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   setPixel(xPos, yPos);         //Sets a single pixel on the LCD screen at the location xPos, yPos.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   invertPixel(xPos, yPos);      //Inverts a single pixel on the LCD screen at the location xPos, yPos.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawLine(xPos, yPos, xPosTo, yPosTo);//Draws a line between two points.\n\nxPos, yPos The line starting point\nxPosTo, yPosTo  The line ending point
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseLine(xPos, yPos, xPosTo, yPosTo);//Erases (i.e. clears) the pixels for the line between the specified pair of points.\n\nxPos, yPos The line starting point\nxPosTo, yPosTo  The line ending point
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   invertLine(xPos, yPos, xPosTo, yPosTo);//Inverts the pixels for the given line.\n\nxPos, yPos The line starting point\nxPosTo, yPosTo  The line ending point\n\nThis function is very useful for functions like drawing a 'clock face', a 'compass' or a gauge on the LCD screen when you want to 'erase' the previous dial pointer and redraw it at a new position. If you use 'invert line' for the original drawing and for the 'erase' drawing the two calls will cancel each other out! And it work well if the line overdraws some existing pixels -- e.g. some text on the LCD.

// These are macros and don't show yet
Display,                      Commands,           NE,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawCircle(Left, Top, Diameter);//Draws outline of the circle with the specified coordinates.\n\nLeft, Top: \nThe coordinates of the top left corner of the circle.\n\nDiameter:\nThe radius of the circle.
Display,                      Commands,           NE,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   fillCircle(Left, Top, Diameter);//Fills the circle with the specified coordinates.\n\nLeft, Top: \nThe coordinates of the top left corner of the circle.\n\nDiameter:\nThe radius of the circle.
Display,                      Commands,           NE,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseCircle(Left, Top, Diameter);//Erases the circle with the specified coordinates.\n\nLeft, Top: \nThe coordinates of the top left corner of the circle.\n\nDiameter:\nThe radius of the circle.
Display,                      Commands,           NE,            feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawInvertCircle(Left, Top, Diameter);//Draws outline of the circle with the specified coordinates using inverted colors.\n\nLeft, Top: \nThe coordinates of the top left corner of the circle.\n\nDiameter:\nThe radius of the circle.

Display,                      Commands,           V3A,           feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawCircle(CenterX, CenterY, Radius);//Draws outline of the circle with the specified coordinates.\n\nCenterX, CenterY:\nThe coordinates of the center of the circle.\n\nRadius:\nThe radius of the circle.
Display,                      Commands,           V3A,           feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   fillCircle(CenterX, CenterY, Radius);//Fills the circle with the specified coordinates.\n\nCenterX, CenterY:\nThe coordinates of the center of the circle.\n\nRadius:\nThe radius of the circle
Display,                      Commands,           V3A,           feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseCircle(CenterX, CenterY, Radius);//Erases the circle with the specified coordinates.\n\nCenterX, CenterY:\nThe coordinates of the center of the circle.\n\nRadius:\nThe radius of the circle
Display,                      Commands,           V3A,           feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawInvertCircle(CenterX, CenterY, Radius);//Draws outline of the circle with the specified coordinates using inverted colors.\n\nCenterX, CenterY:\nThe coordinates of the center of the circle.\n\nRadius:\nThe radius of the circle

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawEllipse(Left, Top, Right, Bottom);//Draws outline of the ellipse with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the ellipse.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the ellipse.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   fillEllipse(Left, Top, Right, Bottom);//Fills (i.e. all pixels black) the ellipse with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the ellipse.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the ellipse.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseEllipse(Left, Top, Right, Bottom);//Draws outline of the ellipse with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the ellipse.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the ellipse.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawInvertEllipse(Left, Top, Right, Bottom);//Draws outline of the ellipse with the specified coordinates using inverted colors.\n\nLeft, Top:\nThe coordinates of the top left corner of the ellipse.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the ellipse.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawRect(Left, Top, Right, Bottom);//Draws outline of the rectangle with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the rectangle.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the rectangle.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   fillRect(Left, Top, Right, Bottom);//Fills (i.e. all pixels black) the rectangle with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the rectangle.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the rectangle.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   eraseRect(Left, Top, Right, Bottom);//Erases (i.e. clears all pixels) the rectangle with the specified coordinates.\n\nLeft, Top:\nThe coordinates of the top left corner of the rectangle.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the rectangle.
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   drawInvertRect(Left, Top, Right, Bottom);//Draws outline of the rectangle with the specified coordinates using inverted colors.\n\nLeft, Top:\nThe coordinates of the top left corner of the rectangle.\n\nRight, Bottom:\nThe coordinates of the bottom right corner of the rectangle.

Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayIconFile(xPos, yPos, sFileName);//Displays a ICON file on the LCD screen at the specified coordinates (xPos, yPos).
Display,                      Commands,           NEV3A,         feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, A,   displayRICFile(nleft, nBottom, pzFileName);//Display a RIC (i.e. 'ICON' or 'Picture') file on the NXT display at the specified coordinates.

Display,                      Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   drawTextCenteredInUserScreenArea(pText);//

Display,                      Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bUserControlsLCDButtons       //Boolean variable that determines whether the user program or system has control of the LCD buttons.
Display,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bNxtLCDStatusDisplay          //Boolean variable that indicates whether the top status line display on the LCD should be present on user-drawn LCD screens.
Display,                      Variables,          V1V2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nLCDButtons                   //Bit map containing which of the three buttons on the VEX LCD are depressed.
Display,                      Variables,          NA,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nLCDContrast                  //Sets the current contrast level. The setting will be lost when the robot is powered off. \n\n '90' is the default value used in the standard NXT-G firmware.
Display,                      Variables,          NA,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nLCDContrastDefault           //Sets the current contrast level and also saves this value in non-volatile flash memory.\n\nThie variables shouldn't be written too many times because it writes to flash memory which has a limited (10K to 100K) count on the number of times that it can be written. \n \n '90' is the default value used in the standard NXT-G firmware.
Display,                      Variables,          A,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nLCDRefreshCycles             //
Display,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nOnBrickProgrammingStep       //Used by RPGReader program to tell UI the current playback position
Display,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nViewStateNXT                 //Controls which of the four different predefined LCD screen display formats should be used by running program.

Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   saveRestoreLCD(bRestoreSave); //
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   selectFont(fontType);         //Selects the standard font for drawing. THere are five different fonts.
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   drawBmpfile(X, Y, pFileName); //Draw an image file at the specified coordinates
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   drawIcon(X, Y, iconType, iconNumber);//Draw ICON with 'index' at the specified coordinates
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   drawIconQuestion(X, Y, state, icons);//Use ICONs in a yes/no pop-up box selection
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   drawQuestion(X, Y, icon1, icon2, pQuestionChars, state, result);//
Display,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   UIScrollDisplay(rowsToScroll);//

// These are deprecated NXT functions
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayString(const int nLineNumber, char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayString(const int nLineNumber, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayTextLine(const int nLineNumber, char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayTextLine(const int nLineNumber, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayBigTextLine(const int nLineNumber, char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayBigTextLine(const int nLineNumber, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayCenteredTextLine(const int nLineNumber, char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayCenteredTextLine(const int nLineNumber, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayCenteredBigTextLine(const int nLineNumber, const char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayCenteredBigTextLine(const int nLineNumber, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayStringAt(const int xPos, const int yPos, char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayStringAt(const int xPos, const int yPos, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayBigStringAt(const int xPos, const int yPos, const char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayBigStringAt(const int xPos, const int yPos, const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtScrollText(const char *pChar, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtScrollText(const string sFormatString, ...);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtSetPixel(const int xPos, const int yPos);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtClearPixel(const int xPos, const int yPos);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDrawLine(const int xPos, const int yPos, const int xPosTo, const int yPosTo);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtEraseLine(const int xPos, const int yPos, const int xPosTo, const int yPosTo);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtInvertLine(const int xPos, const int yPos, const int xPosTo, const int yPosTo);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDisplayRICFile(const int nleft, const int nBottom, const char * pzFileName);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDrawEllipse(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtFillEllipse(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtEraseEllipse(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDrawInvertEllipse(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDrawRect(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtDrawInvertRect(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtEraseRect(const int Left, const int Top, const int Right, const int Bottom);//
Display,                      Commands,           N,             feat_NaturalLanguageInActive,           feat_W_GraphicalLCDDisplay,   F, I,   nxtFillRect(const int Left, const int Top, const int Right, const int Bottom);//


Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   getDriveTrainConfiguration(nDriveTrain);//Read the current drive train configuration.\n\nnDriveTrain:\nA structure of type TDriveTrainConfig passed by reference.\n\nexample:\n\nTDriveTrainConfig theDrive;\ngetDriveTrainConfiguration( theDrive );
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   setDriveTrainMotors(nItsDriveTrainType, motorIndex0, motorIndex1, motorIndex2, motorIndex3);//Set the drive train type and motor indices.  Internal function.
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   setDriveTrainWheels(nAxleLength, nGearRatioA, nGearRatioB, nWheelBase, nWheelDiameter);//Set the drive train axle length, gear ratios and wheel base size.  Internal function.

Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   driveStraight(nLeftMotor, nRightMotor, nSpeed);//
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   driveSynchronized(nLeftMotor, nRightMotor, nLeftSpeed, nRightSpeed);//
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   driveSynchronizedCancel(nMotor);//

Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   getDriveTrainJoysticks(nValueAxis_0, nValueAxis_1);//
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   getGripperArmConfiguration(nGripperArmType, nMotorIndex_0, nMotorIndex_1, nMotorIndex_2, nMotorIndex_3);//
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_DriveTrainConfiguration,F, I,   setGripperArm(nItsGripperArmType, motorIndex0, motorIndex1, motorIndex2, motorIndex3);//
Drive Train,                  Commands,           ALL,           feat_NaturalLanguageInActive,           feat_W_JoystickConfiguration, F, I,   setJoystickDrive(nJoystickDriveType, nJoystickAxisScaling);//

Drive Train,                  Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorDriveTrainMoving();   //
Drive Train,                  Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorsWithDriveSideType(nType, nMotorList);//

EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   ProgramInfoGetPrgname(pgmSlotNumber, pProgramName);//
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   GetOSBuild(nMaxLength, pBuildChars);//Read the OS build information into a char array,\n\nnMaxLength is the maximum number of characters to return in the array,\npBuildChars is the array to read the OS build information into.
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   GetVersion(nMaxLength, pVersionChars);//Read the OS version into a char array,\n\nnMaxLength is the maximum number of characters to return in the array,\npVersionChars is the array to read the OS version into.
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   GetFWBuild(nMaxLength, pBuildChars);//Read the firmware build number into a char array,\n\nnMaxLength is the maximum number of characters to return in the array,\npVersionChars is the array to read the firmware build number into.
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   GetFWVersion(nMaxLength, pVersionChars);//Read the firmware version into a char array,\n\nnMaxLength is the maximum number of characters to return in the array,\npVersionChars is the array to read the firmware version into.
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   GetHWVersion(nMaxLength, pVersionChars);//Read the Hardware version into a char array,\n\nnMaxLength is the maximum number of characters to return in the array,\npVersionChars is the array to read the hardware version into.
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   manuallySetConnectionType(sensorPort, connectionType);//
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   resetAllSensorAutoID();       //
EV3 Misc,                     Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   shellSort(array, size);       //Shell sort function\n\npass an array of long and a size.
EV3 Misc,                     Variables,          E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kFGColor                      //Foreground color\n\nThis is defined as '1'

Events,                       Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   CalibrateEvent(nEventNumber, lowerThreshold, upperThreshold, hysteresis);//
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ClearAllEvents();             //
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ClearEvent(nEventNumber);     //
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   DirectEvent(nEventMask);      //
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   EVENT_MASK(nEvent);           //
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ResetEvent(nEventNumber);     //
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SetEvent(nEvent, nSensor, nType);//
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SetEvent(nEvent, nTimer, nType);//
Events,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SignalEvent(nEventNumber);    //

Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   EST_SENSOR[]                  //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventClicks[]                 //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventCounts[]                 //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventDuration[]               //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventHysteris[]               //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventLower[]                  //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventState[]                  //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventType[]                   //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   eventUpper[]                  //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nAcquirePriority              //
Events,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   taskEvents[]                  //

File Access,                  Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bValidFile(nFileIndex);       //Indicates whether the VEX file directory contains a valid file at the specified slot
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   close(hFileHandle, nIoResult);//Closes the specified file handle.\n\nThis should be the last file I/O operation after all reads or write are completed. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   closeAllHandles(nIoResult);   //Internal function. Closes all handles opened by a program. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   delete(sFileName, nIoResult); //Deletes the specified filename from the NXT. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   delete(pzFileName, nIoResult);//Deletes the specified filename from the NXT. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   deleteFile(nFileIndex);       //
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   findFirstFile(hFileHandle, nIoResult, sSearch, sFileName, nFilesize);//Begins a search through the files in the NXT. 'nFileHandle' returns a handle to the first file found.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   findFirstFile(hFileHandle, nIoResult, pzSearch, sFileName, nFilesize);//Begins a search through the files in the NXT. 'nFileHandle' returns a handle to the first file found.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   findNextFile(hFileHandle, nIoResult, sFileName, nFilesize);//Finds the next file in a previously initiated search.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   openRead(hFileHandle, nIoResult, sFileName, nFileSize);//Opens 'sFileName' for reading. 'hFileHandle' is used for subsequent reads to this file. 'nFileSize' is filled with the file length. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   openRead(hFileHandle, nIoResult, pzFileName, nFileSize);//Opens 'sFileName' for reading. 'hFileHandle' is used for subsequent reads to this file. 'nFileSize' is filled with the file length. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   openWrite(hFileHandle, nIoResult, sFileName, nFileSize);//Opens 'sFileName' for writing with specified 'file size'. 'hFileHandle' is used for subsequent writes to this file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   openWrite(hFileHandle, nIoResult, pzFileName, nFileSize);//Opens 'sFileName' for writing with specified 'file size'. 'hFileHandle' is used for subsequent writes to this file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readByte(hFileHandle, nIoResult, nParm);//Reads a byte variable (8-bit) from the specified file.  'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   readByteX(hFileHandle, nIoResult, nParm);//Internal Variable
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readFloat(hFileHandle, nIoResult, fParm);//Reads a float variable from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readLong(hFileHandle, nIoResult, nParm);//Reads a long integer variable (32-bit) from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readShort(hFileHandle, nIoResult, nParm);//Reads a short integer variable (16-bit) from the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   rename(pzFileName, nIoResult, pzOriginalFileName);//Renames file 'sOriginalFileName' to 'sFileName'.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   rename(sFileName, nIoResult, sOriginalFileName);//Renames file 'sOriginalFileName' to 'sFileName'.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeByte(hFileHandle, nIoResult, nParm);//Writes a single byte to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeFloat(hFileHandle, nIoResult, fParm);//Writes a float variable to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeLong(hFileHandle, nIoResult, nParm);//Writes a long integer (32-bit) variable to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeShort(hFileHandle, nIoResult, nParm);//Writes a short integer variable (16-bit) to the specified file. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeString(hFileHandle, nIoResult, sParm);//Writes a string to the specified file including null terminator. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeString(hFileHandle, nIoResult, pzParm);//Writes a string to the specified file including null terminator. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeText(hFileHandle, nIoResult, sParm);//Writes a string to the specified file without null terminator. 'nIoResult' is non-zero when error occurs.
File Access,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   writeText(hFileHandle, nIoResult, pzParm);//Writes a string to the specified file without null terminator. 'nIoResult' is non-zero when error occurs.

File Access,                  Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nAvailFlash                   //The amount of flash memory that is currently unused and available for file storage. Units are 1/10 of 1K (i.e. 100 bytes).
File Access,                  Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   tFileHandle                   //Internal Variable

File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bEv3FileExists(pFileName);    //Check if a file exists.
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileOpenWrite(pzFileName);    //Open a file for writing. File name can contain a path, but this will be ignored. All ROBOTC data files like this reside under /home/root/lms2012/prjs/rc-data. This cannot be changed and sub folders are not supported. Returns a file descriptor, which is used for writing and subsequently closing the file
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileOpenRead(pzFileName);     //Open a file reading. File name can contain a path, but this will be ignored. All ROBOTC data files like this reside under /home/root/lms2012/prjs/rc-data. This cannot be changed and sub folders are not supported. Returns a file descriptor, which is used for reading and subsequently closing the file
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _OpenFile(pzFileName, nFlags);//Internal function for opening a file.
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileClose(nFileDescriptor);   //Close the file. Returns true if the close() went off without an issue, false if it didn't.
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileWriteLong(nFileDescriptor, data);//Write a signed long value to the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileReadLong(nFileDescriptor, pData);//Read a signed long value from the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileWriteFloat(nFileDescriptor, data);//Write a float value to the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileReadFloat(nFileDescriptor, pData);//Read a float value from the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileWriteShort(nFileDescriptor, data);//Write a signed 2 byte (short) value to the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileReadShort(nFileDescriptor, pData);//Read a signed 2 byte (short) value from the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileWriteChar(nFileDescriptor, data);//Write an unsigned single byte value to the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileReadChar(nFileDescriptor, pData);//Read an unsigned single byte value from the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileWriteData(nFileDescriptor, pData, nWriteLen);//Write arbitrary data to the file descriptor. Returns true if action did not cause an error, false if it did
File Access,                  Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   fileReadData(nFileDescriptor, pData, nReadLen);//Read arbitrary data from the file descriptor. Returns true if action did not cause an error, false if it did

High Speed,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtGetAvailHSBytes();         //Returns the number of 'raw' input bytes available on the RS-485 high speed serial link available on sensor port 4.
High Speed,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtReadRawHS(pData, nMaxBufferSize);//Reads 'raw' (i.e. low-level, no protocol implemented) bytes from the RS-485 high speed serial link available on sensor port 4. \n
High Speed,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtSetHSBaudRate(nBaudRate);  //Sets the baud rate for the high speed RS-485 serial link available on sensor port 4.
High Speed,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtWriteRawHS(pData, nLength, nAddress);//Writes 'raw' (i.e. low-level, no protocol implemented) bytes to the RS-485 high speed serial link available on sensor port 4.
High Speed,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtWriteCharRawHS(nSingleChar, nAddress);//Writes 'raw' (i.e. low-level, no protocol implemented) bytes to the RS-485 high speed serial link available on sensor port 4.
High Speed,                   Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kDefaultBaudRate              //Default baud rate to use for the HS-485 high speed serial link
High Speed,                   Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtHS_Mode                    //
High Speed,                   Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtHS_Status                  //
IO Map Access,                Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtReadIOMap(sIOMapName, nIoResult, pBuffer, nOffset, nNumbOfBytes);//Reads a module's IOMap into the specified location
IO Map Access,                Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nxtWriteIOMap(sIOMapName, nIoResult, pBuffer, nOffset, nNumbOfBytes);//Writes a module's IOMap into the specified location


Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   closeMailbox(mailboxIndex);   //Closes mailbox
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMailboxMessageSize(mailboxIndex);//Get size of next message for mailbox. Negative value indicates no message available.
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMailboxMessageAvailable(mailboxIndex);//
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMailboxName(mailboxIndex, pMailboxName, nMaxNameLength);//Get the name assigned to a mailbox
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readMailbox(mailboxIndex, pData, nReadLength);//Read data from mailbox
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   waitForMailboxMessage(mailboxIndex);//Wait for message to be available
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   testForMailboxMessage(mailboxIndex, bBusy);//Tests if new message is available
Mailboxes,                    Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   openMailbox(mailboxIndex, pMailboxName);//Open a mailbox on the brick'
Mailboxes,                    Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kNumbOfMailboxes              //

Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   abs(input);                   //Returns the absolute value of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   fabs(input);                  //Returns the absolute value of the input for floating point values
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   acos(Cosine);                 //Returns the arc cost value of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   asin(Sine);                   //Returns the arc sine value of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   atan(Tangent);                //Returns the arc tan value of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   atof(pzSrce);                 //convert ASCII string to float\n\npzSrce is an array of characters
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   atof(sSrce);                  //convert ASCII string to float\n\nsSrce is a constant string
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   atoi(pzSrce);                 //convert ASCII string to integer\n\npzSrce is an array of characters
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   atoi(sSrce);                  //convert ASCII string to integer\n\nsSrce is a constant string
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   ceil(input);                  //Returns the ceiling value (i.e. next largest integer) of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   cos(fRadians);                //Returns the cosine of the input (radians)
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   cosDegrees(nDegrees);         //Returns the cosine of the input (degrees)
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   degreesToRadians(nDegrees);   //Converts degrees to radians
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   exp(input);                   //Returns the exponential value of the input
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   floor(input);                 //Returns the 'floor' value (i.e. next smallest integer) of the input
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   log(input);                   //Returns the natural logarithm of the input value.
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   log10(input);                 //Returns the base 10 logarithm of the input value.
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   pow(base, exponent);          //compute base raised to the power of exponent.
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   radiansToDegrees(fRadians);   //Converts radians to degrees
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   sgn(input);                   //Returns -1, 0, +1 depending on whether the input is negative, zero or positive value
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   sin(fRadians);                //Returns the sine of the input (radians)
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   sinDegrees(nDegrees);         //Returns the sine of the input (degrees)
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sinDegreesX(fResult, degrees);//Internal Entries
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sinDegreesX(fResult, fRadians);//Internal Entries
Math,                         Commands,           NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   sqrt(input);                  //Returns the square root of the input
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   srand(seed);                  //Sets the random number generator seed to 'seed'
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   srand(nSeedValue);            //Sets the random number generator seed to 'seed'
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   atan2(Y, X);                  //Returns the principal value of the arc tangent of y/x, expressed in radians.
Math,                         Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   round(input);                 //Round to integral value, regardless of rounding direction.
Math,                         Variables,          NEV2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   PI                            //Returns the value of PI
Math,                         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   random(range);                //Returns a random number in the positive range zero to 'range - 1'.
Math,                         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   random[]                      //Returns a random number in the positive range zero to 'range - 1'.
Math,                         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   rand()                        //Returns a random number in the positive range zero to 'range - 1'\n\nreturns a short
Math,                         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   randlong()                    //Returns a random number in the positive range zero to 'range - 1'\n\nreturns a long

MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bMsgAvailable();              //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bQueuedMsgAvailable();        //Boolean function that indicates whether a unprocessed message is available in the NXT's received message queue.
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   clearMessage();               //Clears the current message. The next time the 'message' variable is accessed, the firmware will attempt to obtain the first message from the queue of messages received by the NXT.
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMessage(nNodeIndex, pData, nMaxLength, nActualLength);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMyNodeIndex();             //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getNetworkingStartupFinished();//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getNetworkingStatus();        //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   resetNetworkDefinition();     //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendMessage(nMessageID);      //Sends a single 16-bit word message. 'nMessageID' should range in value form -32767 to +32767. Message value 0 is invalid and should not be used. It is a special value  to indicate 'no message' received when using the 'message' variable. The message is sent over BT.\nDo not send messages faster than about 1 message per 30 milliseconds or it is possible for some messages to be lost.
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendMessage(nNodeIndex, pData, nLength);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendMessageWithParm(nMessageID, nParm1, nParm2);//Identical in function to the 'sendMessage' opcode except that the message is three 16-bit values. This is useful in easily sending separate items of information in a single message.\nDo not use a value of zero for 'nMessageID'.
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendMessageWithWait(nNodeIndex, pData, nLength);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessage(nMessage);         //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessage1();                //
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessage2WordParm(nMessage, nParm1, nParm2);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessage3WordParm(nMessage, nParm1, nParm2, nParm3);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessageByteParm(nMessage, nParm);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessageWithParm(nMessage, nParm);//
MultiRobot,                   Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMessageWordParm(nMessage, nParm);//
MultiRobot,                   Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   message                       //Contains the value (value -32767 to + 32767) of the last message received over the Bluetooth channel. Many messages can be queued at the receiving NXT. See the sample programs for technique to skip all but the last queued message.\n\nA value of '0' indicates that no message has been received of that the last received message has been processed by the user's program. The next time 'message' variable is accessed, it will get the next message, if available, from the queue of received messages stored by the NXT firmware.\n\nCall the 'ClearMessage()' function to indicate that processing of the current message is complete.
MultiRobot,                   Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   messageParm[]                 //Contains optional message parameters (up to 3 16-bit words) for messages received over the RCX infra-red channel. 'messageParm[0]' is the same as the variable 'message'.

Miscellaneous,                Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   clearAll(nCommandFlags);      //Internal command used by debugger.
Miscellaneous,                Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getFirmwareBuildDate(sDate);  //Gets string containing date and time of firmware load build.
Miscellaneous,                Commands,           NV2A,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getPCJoystickSettings(joystick);//
Miscellaneous,                Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   memcpy(pToBuffer, pFromBuffer, nNumbOfBytes);//Function copies characters from 'pFromBuffer' to 'pToBuffer'. nBytesToCopy is the number of bytes to copy.\n\nIdentical to the function found in conventional C 'string.h' library.
Miscellaneous,                Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   memset(pToBuffer, nValue, nNumbOfBytes);//Sets a block of memory at pBuffer to the value nValue. nBytesToSet is the number of bytes to set.\n\nThis is a useful function for initializing the value of an array to all zeros.\n\nIdentical to the function found in conventional C 'string.h' library. \n\n
Miscellaneous,                Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   memmove(pToBuffer, pFromBuffer, nNumbOfBytes);//Function copies characters from 'pFromBuffer' to 'pToBuffer'. nBytesToCopy is the number of bytes to copy.\n\nIdentical to the function found in conventional C 'string.h' library. The buffers can overlap addresses; in memcpy they cannot overlap.
Miscellaneous,                Commands,           NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   memcmp(pToBuffer, pFromBuffer, nNumbOfBytes);//Function compares characters from 'pFromBuffer' to 'pToBuffer'. nNumbOfBytes is the number of bytes to compare.\n\nIdentical to the function found in conventional C 'string.h' library.
Miscellaneous,                Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bFastSonarSensor              //
Miscellaneous,                Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bVexBlackEye                  //Boolean flag to turn the VEX yellow LED 'eye' off. Normally the eye flashes when their is program activity on the VEX.
Miscellaneous,                Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   true                          //
Miscellaneous,                Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   false                         //
Miscellaneous,                Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nIfiSPIMsgCounts              //Numeric count of the number of messages received from the SPI channel to the master processor
Miscellaneous,                Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nMotorBeingTrace              //
Miscellaneous,                Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexMasterVersion             //Variable contains the firmware version for the VEX master CPU
Miscellaneous,                Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   version                       //Contains the firmware version number.
Miscellaneous,                Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getVexIqDeviceInfo(nDeviceIndex, nDeviceType, nDeviceStatus, nDeviceVersion);//Get information about the device connected to a port on the VexIQ.\n\nnDeviceIndex is the index of the VexIQ port\nnDeviceType, nDeviceStatus and nDeviceVersion are passed by reference and return information about the device on the indexed port.\n

Motors,                       Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   changeSpeedRampingParms(nMotorIndex, nMinimumRampStartUpSpeed, nRampStartupChangeRate, nMinimumRampDownSpeed,nRampDownChangeRate);//Change the speed ramping properties for the indexed motor.

Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorTarget(nMotorIndex);  //Returns the current motors target position value in 'Degrees' \n Note: To get the current position (and not target), use getMotorEncoder
Motors,                       Commands,           NEV3,          noFeatRest,                             noFeatRest,                   F, B,   getMotorEncoder(nMotorIndex); //Returns the current motor encoder position value in 'Degrees' (unless units are otherwise set)
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   moveMotorTarget(nMotorIndex, nPosition, nSpeed);//Sets a motor to travel a set distance (specified by nPosition) from its relative position at specified speed. \n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorTarget(nMotorIndex, nPosition, nSpeed);//Sets a motor to travel a set distance (specified by nPosition) from its absolute position at specified speed. \n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                       Commands,           EV3,           noFeatRest,                             noFeatRest,                   F, A,   getMotorBrakeMode(nMotorIndex);//Returns the Braking mode of the specified motor. Braking mode defaults to 'Holding' on all motors.
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setMotorBrakeMode(nMotorIndex,nBrakeMode);//Sets the Braking mode of a specified motor. Braking mode is at 'Holding' by default, but can be set to 'Brake' or 'Coast'

Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   resetMotorEncoder(nMotorIndex);//Resets the current encoder's value back to zero.
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorReversed(nMotorIndex, bReversed);//Sets the reversed flag of a motor to logically switch the sign of motor speed commands.\nmotorPort: Name of motor to be modified. No default value, user must provide a motor name.\nreversedValue: A Boolean value of true or false to indicate if the motor should be reversed.
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSpeed(nMotorIndex, nSpeed);//Sets the current speed of the motor in percent (-100% full reverse / 0% stop / +100% full forward)

// Macro used for V3
Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorRunning(nMotorIndex); //

Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setMotorCurrentLimit(nMotorIndex, nCurrent);//Returns the value of current limiter setting of the specified motor in mA (milliamp).
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorCurrentLimit(nMotorIndex);//Returns the current limiter setting of the specified motor in mA (milliamp).
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorCurrent(nMotorIndex); //Returns the amount of current being used by the specified motor in mA (milliamp).
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   updateMotorPWMScale(nMotorIndex);//Reads the current VEX IQ Brain battery voltage and updates the VEX IQ motors 'PWM Scale' to ensure consistent motor movement across all battery values. Note: This command is also executed at program start automatically in the firmware.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorOverTemp(nMotorIndex);//Returns a boolean flag indicating if the motor has exceeded its internal temperature limit.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorCurrentLimitFlag(nMotorIndex);//Returns a boolean flag indicating if the motor has exceeded its current limit specified by 'Motor Strength'.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorZeroVelocity(nMotorIndex);//Returns a boolean flag indicating if the motor is not moving (true) or is moving (false).
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getMotorZeroPosition(nMotorIndex);//Returns a boolean flag indicating if the motor has reached within 1 degree (3 counts) of its current set target.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getServoEncoder(nMotorIndex); //Returns the current motor (in servo mode) encoder position value in 'Degrees' (unless units are otherwise set)
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setServoTarget(nMotorIndex, nPosition);//Sets a motor (in servo mode) to travel a set distance (specified by nPosition) from its absolute position at specified speed. \n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setMotorEncoderUnits(nEncoderUnitMode);//Sets the types of units for all motors encoders. By default, the motors encoder are set to 'degrees', but can be specified to 'rotations' (1.0/rev) or 'counts' (960/rev)
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorEncoderUnits();       //Returns the type of units the motor encoders are currently using. By default, the motor encoders are set to 'degrees'.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorMoving(nMotorIndex);  //Returns a boolean flag indicating if the motor is moving (true) or is stopped (false).
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorReversed(nMotorIndex);//Returns a boolean flag indicating if the 'reverse' mode has been enabled on a motor - This will flip the logical direction of motor speeds.
Motors,                       Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorSpeed(nMotorIndex);   //Returns the current speed (in percent -100% to +100%) of the specified motor.

Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSyncTime(nMotorOne, nMotorTwo, nTurnRatio, nTimeMsec, nSignedPower);//Synchronize two motors for a specified number of ms.
Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSyncEncoder(nMotorOne, nMotorTwo, nTurnRatio, nEncoderCount, nSignedPower);//Synchronize two motors for a specified number of encoder ticks.
Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSync(nMotorOne, nMotorTwo, nTurnRatio, nSignedPower);//Synchronize two motors for an infinite time
Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorRPM(nMotorIndex);     //Get the RPM of the motor, updated 10x per second

Motors,                       Commands,           EV3,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   waitUntilMotorStop(nMotorIndex);//Command to delay (wait) until a specified motor has come to stop.
Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSyncTime(nMotorOne, nMotorTwo, nTurnRatio, nTimeMsec, nSignedPower);//
Motors,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorSyncEncoder(nMotorOne, nMotorTwo, nTurnRatio, nEncoderCount, nSignedPower);//

Motors,                       Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bFloatDuringInactiveMotorPWM  //Boolean variable. True 'coasts' ('floats') the motor when power is not applied. False brakes the motor. \n\nFalse is best choice.
Motors,                       Variables,          NV1V2A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   bMotorReflected[]             //Boolean array. Used to indicate that the direction of a motor should be reflected 180 degrees. Useful when mechanical design results in a logical 'reversed' condition of a motor.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   motorPWMLevel[]               //
Motors,                       Variables,          V1V2V3A,       feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   motor[]                       //Contains the motor power or speed level (-127 to +127). Negative values are reverse; positive forward. Zero is stopped.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   motor[]                       //Contains the motor power or speed level (-100 to +100). Negative values are reverse; positive forward. Zero is stopped.
Motors,                       Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nIfiPwmOwner                  //Bitmap with one entry for each motor. Indicates whether motor PWM is generated by user CPU or by master CPU. An advanced programming feature.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMaxRegulatedSpeed            //Specifies the maximum speed, in encoder counts per second, that should be used for speed regulation.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nMaxRegulatedSpeed12V         //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nMaxRegulatedSpeedNxt         //
Motors,                       Variables,          NV2,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorEncoderTarget[]         //Sets the incremental encoder counts that a motor should move before system puts motor back in idle or stopped state. Zero means run forever.
Motors,                       Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorEncoderTargetAbsolute[] //
Motors,                       Variables,          NV2,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nMotorEncoder[]               //Current value of the motor encoder.\n\nIn earlier versions of ROBOTC this was a 'short' variable (-32K to +32K) it was possible to wraparound when the value grew larger than 16 bits. It is now a 32-bit long variable.\n\nWriting any value to the encoder will reset it to zero. You cannot write an arbitrary value to it.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorPIDSpeedCtrl[]          //Speed regulation type (non, speed, dual sync motor) for a motor.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorRunState[]              //Array containing the internal state (idle, ramping up or down, steady state speed, holding stopped position) of a NXT motor. Useful in checking when a motor movement 'command' has finished.
Motors,                       Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nPidUpdateInterval            //Interval (in milliseconds to use for NXT motor PID updates. Default is 25.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nPidUpdateInterval12V         //Interval (in milliseconds to use for 12V motor PID updates. Default is 25.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nRegulatedSpeed               //Maximum motor speed that should be used for regulated motor control. Default is 1000 counts/second which can only be achieved with fully charged alkaline/lithium batteries.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nSyncedMotors                 //Used to specify synchronization of two NXT motors so they operate in 'lock step' at the same speed turn ratio.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nSyncedTurnRatio              //Turn ratio to use for a motor that is 'slaved' to another motor. +100 is same as primary motor. Zero is stopped. -100 is same movement as primary but in opposite direction. In between variables are proportional to primary motor.
Motors,                       Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nVexPwmOwner                  //Backwards compatibility for VEX. Replaced by variable 'nIfiPwmOwner'.
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVirtualMotorChanges          //Internal variable. Used in motor multiplexer applications.
Motors,                       Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorCurrentLimit[]          //
Motors,                       Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nMotorEncoderRaw[]            //

// Motor ports, not sure these are really needed, all internal menu level
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   motorA                        //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   motorB                        //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   motorC                        //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C1_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C1_2                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C2_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C2_2                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C3_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C3_2                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C4_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S1_C4_2                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S2_C1_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S2_C1_2                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S2_C2_1                   //
Motors,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   mtr_S2_C2_2                   //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port1                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port2                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port3                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port4                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port5                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port6                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port7                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port8                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port9                         //
Motors,                       Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port10                        //
Motors,                       Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port11                        //
Motors,                       Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   port12                        //

Motors,                       Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   motorType[]                   //The type of a motor
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorEncoder(nMotor);      //Current value of the motor encoder.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorVelocity(nMotor);     //Current value of the motor velocity in rpm.  This does not indicate direction and will always be a positive value.  To determine the direction change the sign if the motor has been sent a negative control value.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getMotorTargetCompleted(nMotor);//This returns a flag (true or false) that indicastes if the motor has completed moving to a target position.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   moveMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);//Move the motor to the relative target position at a maximum speed of nMaxSpeedToUse.  If bHoldAtEnd is true then the motor will be held at the target position.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   resetMotorEncoder(nMotor);    //reset the encoder count to zero.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);//Move the motor to the absolute target position at a maximum speed of nMaxSpeedToUse.  If bHoldAtEnd is true then the motor will be held at the target position.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getEncoderForMotor(nMotorIndex);//return the integrated motor encoder sensor that is associated with this motor.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getEncoderAndTimeStamp(nMotor, nEncoder, nTimeStamp);//Get the encoder count for the motor and the time at which it was last read.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   mapEncoderToMotor(nMotorIndex, nSensorIndex);//Associate an integrated motor encoder with a motor.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   slaveMotor(nSlaveMotor, nMasterMotor);//Slave one motor to another.  Any pwm values sent to the master will also be sent to the slave.
Motors,                       Integrated Encoders,V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMotorSlewSpeed(nMotor);    //Maximum change of the PWM value used when the motor is under PID control.

Motors,                       Variables,          NEV2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nMotorDriveSide[]             //


Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   forward(quantity, unitType, speed);//Moves your robot in the forward direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50) \n(Forward will always move your robot Forward.)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   backward(quantity, unitType, speed);//Moves your robot in the reverse (backwards) direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: -100 to 0 (default of -50) \n(Backward will always move your robot backward.)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   turnLeft(quantity, unitType, speed);//Rotates your robot to the left using a point turn. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   turnRight(quantity, unitType, speed);//Rotates your robot to the right using a point turn. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   moveMotor(motorPort, quantity, unitType, speed);//Rotates the specified motor for a specific duration. The motor will come to a stop after it completes its movement. \nmotorPort: The motor being controlled. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)

Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   forward(quantity);            //Moves your robot in the forward direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50) \n(Forward will always move your robot Forward.)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   backward(quantity);           //Moves your robot in the reverse (backwards) direction for a specific distance/time at a specific speed. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: -100 to 0 (default of -50) \n(Backward will always move your robot backward.)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   turnLeft(quantity);           //Rotates your robot to the left using a point turn. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   turnRight(quantity);          //Rotates your robot to the right using a point turn. The robot will come to a stop after it completes its movement. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)
Natural Language,             Simple Behaviors,   NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   moveMotor(motorPort, quantity);//Rotates the specified motor for a specific duration. The motor will come to a stop after it completes its movement. \n motorPort: The motor being controlled. \n quantity: The number of unitType (default is 1). \nunitType: rotations (default), degrees, seconds, milliseconds. \n speed: 0 to 100 (default of 50)

Natural Language,             Simple Behaviors,   V3,            feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   forwardForTime(quantity);     //
Natural Language,             Simple Behaviors,   V3,            feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   backwardForTime(quantity);    //

Natural Language,             Motor Commands,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, A,   setMotorReversed(nMotorIndex, bReversed);//
Natural Language,             Motor Commands,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   setMotor(motorPort, speed);   //Sets the speed of an individual motor port. \nmotorPort: Name of motor to be controlled by the command. \n speed: The rotational speed of the motor in percent (-100 to +100). Positive numbers will rotate the motor clockwise (forward) and negative numbers will rotation the motor counter-clockwise (reverse). Default value is 50.
Natural Language,             Motor Commands,     EV3,           feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, A,   setMotorBrakeMode(nMotorIndex, nBrakeMode);//Sets the Braking mode of a specified motor. Braking mode is at 'Holding' by default, but can be set to 'Brake' or 'Coast'
Natural Language,             Motor Commands,     EV3V2,         feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   setMultipleMotors(speed, firstMotor, secondMotor, thirdMotor, fourthMotor);//Sets the speed for up to 4 motors at the same time. \n speed: The rotational speed of the motor in percent (-100 to +100). Default value is 50.\nfirstMotor: Name of first motor to set to the specified speed. No default value. \nsecondMotor: Name of second motor to be set to the speed. This parameter is optional. \nthirdMotor: Name of third motor to be set to the speed. This parameter is optional. \nfourthMotor: Name of fourth motor to be set to the speed. This parameter is optional.
Natural Language,             Motor Commands,     N,             feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   setMultipleMotors(speed, firstMotor, secondMotor, thirdMotor);//Sets the speed for up to 3 motors at the same time. \n speed: The rotational speed of the motor in percent (-100 to +100). Default value is 50.\nfirstMotor: Name of first motor to set to the specified speed. No default value. \nsecondMotor: Name of second motor to be set to the speed. This parameter is optional. \nthirdMotor: Name of third motor to be set to the speed. This parameter is optional.
Natural Language,             Motor Commands,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   stopMotor(motorPort);         //Command to stop an individual motor. \n motorPort: Name of motor to be controlled by the command.
Natural Language,             Motor Commands,     EV2V3,         feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   stopMultipleMotors(firstMotor, secondMotor, thirdMotor, fourthMotor);//Stops up to 4 motors at the same time. \nfirstMotor: Name of first motor to set to be stopped. No default value. \nsecondMotor: Name of second motor to be stopped. This parameter is optional. \nthirdMotor: Name of third motor to be stopped. This parameter is optional. \nfourthMotor: Name of fourth motor to be stopped. This parameter is optional.
Natural Language,             Motor Commands,     N,             feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   stopMultipleMotors(firstMotor, secondMotor, thirdMotor);//Stops up to 3 motors at the same time. \nfirstMotor: Name of first motor to set to be stopped. No default value. \nsecondMotor: Name of second motor to be stopped. This parameter is optional. \nthirdMotor: Name of third motor to be stopped. This parameter is optional.
Natural Language,             Motor Commands,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   stopAllMotors();              //Command to stop all motors connected to the robot. This command takes no parameters  the robot will instantly stop when stop is called.
Natural Language,             Motor Commands,     NEV3,          feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   resetMotorEncoder(nMotorIndex);//Resets the current encoder's value back to zero.
Natural Language,             Motor Commands,     V2,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   resetMotorEncoder(nMotor);    //Resets the current encoder's value back to zero.

Natural Language,             Motor Commands,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, A,   setMotorTarget(nMotorIndex, nPosition, nSpeed);//Sets a motor to travel a set distance (specified by nPosition) from its absolute position at specified speed. \n nPosition takes a value in 'Degrees' (unless units are otherwise set)
Natural Language,             Motor Commands,     EV3,           feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, A,   moveMotorTarget(nMotorIndex, nPosition, nSpeed);//Sets a motor to travel a set distance (specified by nPosition) from its relative position at specified speed. \n nPosition takes a value in 'Degrees' (unless units are otherwise set)

Natural Language,             Motor Commands,     V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   setMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);//
Natural Language,             Motor Commands,     V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   moveMotorTarget(nMotor, nEncoderCountTarget, nMaxSpeedToUse, bHoldAtEnd);//
Natural Language,             Motor Commands,     V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, A,   setPIDforMotor(theMotor, bEnable);//

Natural Language,             Remote Control,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   arcadeControl(verticalJoystick, horizontalJoystick, threshold);//Remote control of your robot by using a single joystick (X and Y). This command must be inside of a loop in order to work. \n Default Values: \nverticalJoystick: ChA \nhorizontalJoystick: ChB \n threshold: 10

Natural Language,             Remote Control,     NEV3,          feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   tankControl(rightJoystick, leftJoystick, threshold);//Remote control of your robot by using two joystick axes (Y and Y). This command must be inside of a loop in order to work. \n Default Values: \nrightJoystick: ChD \nleftJoystick: ChA \n threshold: 10

Natural Language,             Remote Control,     V2,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   tankControl(leftJoystick, rightJoystick, threshold);//Remote control of your robot by using two joystick axes (Y and Y). This command must be inside of a loop in order to work. \n Default Values: \nrightJoystick: ChD \nleftJoystick: ChA \n threshold: 10


Natural Language,             Remote Control,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   armControl(armMotorPort, upButton, downButton, armSpeed);//Remote control of a motor on your robot by using wireless controller buttons. This command must be inside of a loop in order to work. \n Default Values: \narmMotorPort: No Default \nupButton: BtnRUp \ndownButton: BtnRDown \narmSpeed: 75
Natural Language,             Remote Control,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   setJoystickScale(nScaledPercentage);//
Natural Language,             Remote Control,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   buttonControl(armMotorPort, upButton, downButton, armSpeed);//
Natural Language,             Remote Control,     NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   joystickControl(armMotorPort, motorJoystick, threshold);//

Natural Language,             Setup,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   robotType(type);              //Choose which robot you want to write a program for. \nAcceptable robots: Recbot, Swervebot, Squarebot, and none. \n(If you don't use this function at all, it will default to none!)
Natural Language,             Movement,           V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   setServo(servoPort, position);//Rotates a servo to a specified position. \nRange: -127 to 127\nAcceptable Motor Ports: ports 2 through 9,(and your names for them given in Motors and Sensors Setup.)
Natural Language,             Movement,           V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   startMotor(motorPort, speed); //Start a motor at a specified speed.\nRange: -127 to 127\nAcceptable Motors: ports 1 through 10,(and your names for them given in Motors and Sensors Setup.)
Natural Language,             Movement,           V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   stopMotor(motorPort);         //Stops a motor./nAcceptable Motors: ports 1 through 10, (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   arcadeControl(verticalJoystick, horizontalJoystick, threshold);//Enables 'arcade' style remote control of a robot. \nNote: Command must be placed in a loop to enable continuous control.
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   backward(speed);              //Both wheels rotate backward at the same speed and the robot moves straight backward.\nRange: -127 to 127 \n(Backward will always move your robot backward.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   forward(speed);               //Both wheels rotate forward at the same speed and the robot moves straight forward.\nRange: -127 to 127 \n(Forward will always move your robot forward.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   lineTrackForRotations(rotations, threshold, leftSensorPort, centerSensorPort, rightSensorPort);//The robot will track a black line on a white surface for a specified distance in rotations.\nThreshold Range: (light) 0 to 4095 (dark)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   lineTrackForTime(trackTime, threshold, leftSensorPort, centerSensorPort, rightSensorPort);//The robot will track a black line on a white surface for a specified time in seconds.\nThreshold Range: (light) 0 to 4095 (dark)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   moveStraightForRotations(rotations, rightEncoderPort, leftEncoderPort);//Uses feedback from the shaft encoders to self correct forward movements for a specified number of rotations. \nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   moveStraightForTime(seconds, rightEncoderPort, leftEncoderPort)//Uses feedback from the shaft encoders to self correct forward movements for a specified number of seconds. \nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   pointTurn(direction, speed);  //Both wheels rotate at the same speed but in opposite directions, causing the robot to turn around it's center. This makes a sharp turn in place.\nRange: -127 to 127\n\nThe Directions allowed are: right, left
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   stop();                       //Both wheels do not move, causing the robot to stop.
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   swingTurn(direction, speed);  //One wheel rotates while the other does not move, causing the robot to turn around the stopped wheel. This makes a wide turn.\nRange: -127 to 127\n\nThe Directions allowed are: right, left
Natural Language,             Robot Motion,       V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   tankControl(rightJoystick, leftJoystick, threshold);//Enables basic 'tank' style remote control of a robot. \nNote: Command must be placed in a loop to enable continuous control.
Natural Language,             Wait,               V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   wait(waitTime);               //Wait an amount of time measured in seconds.
Natural Language,             Wait,               V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   waitInMilliseconds(waitTime); //Wait an amount of time measured in milliseconds.
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilBump(sensorPort, delayTimeMS);//The robot does what it was doing until the touch sensor is pressed in and then released out.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.) \n Acceptable Delay Times: 0 to 3,600,000 milliseconds.
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilButtonPress(button);     //The robot does what it was doing until a button on the LCD is pressed.\nAcceptable Buttons: centerBtnVEX, rightBtnVEX, leftBtnVEX
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilDark(threshold, sensorPort);//The robot does what it was doing until the light sensor reads a value darker than the threshold.\nRange: (light) 0 to 4095 (dark) \nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilEncoderCounts(distance, sensorPort);//The robot does what it was doing until the encoder counts match the desired value. \nRange: 0 to >65000\nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilLight(threshold, sensorPort);//The robot does what it was doing until the light sensor reads a value lighter than the threshold.\nRange: (light) 0 to 4095 (dark) \nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilPotentiometerGreaterThan(position, sensorPort);//The robot does what it was doing until the potentiometer reads a value greater than a set position value.\nRange: 0 to 4095 (+-5 due to mechanical stops)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilPotentiometerLessThan(position, sensorPort);//The robot does what it was doing until the potentiometer reads a value less than a set position value.\nRange: 0 to 4095 (+-5 due to mechanical stops)\nAcceptable Sensors: analog ports 1 through 8 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilRelease(sensorPort);     //The robot does what it was doing until the touch sensor is released.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilRotations(rotations, sensorPort);//The robot does what it was doing until the encoder rotations match the desired value.\nRange: 0 to >65000 \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilSonarGreaterThan(distance, sensorPort);//The robot does what it was doing until the sonar sensor reads a value greater than a set distance in centimeters.\nRange: 0 to 647 (A value of -1 means it cannot detect anything.) \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilSonarLessThan(distance, sensorPort);//The robot does what it was doing until the sonar sensor reads a value less than a set distance in centimeters.\nRange: 0 to 647 (A value of -1 means it cannot detect anything.) \nAcceptable Sensors: digital ports 1 through 11 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   untilTouch(sensorPort);       //The robot does what it was doing until the touch sensor is pressed in.\nAcceptable Sensors: digital ports 1 through 12 (and your names for them given in Motors and Sensors Setup.)
Natural Language,             Until,              V2,            feat_LegacyNaturalLanguageActive,       feat_W_DbgTargetVirtualWorld, T, B,   untilCompassDegrees(degrees, buffer)//The robot does what it was doing until the compass sensor reaches the desired heading in degrees, +- buffer size.\nNote that it is possible to skip over the desired heading if moving too fast; increasing the buffer size can resolve this.
Natural Language,             Special,            V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   turnFlashlightOff(flashlightPort);//Turns off a VEX Flashlight. \nAcceptable Motor Ports: motor ports 1 through 10,(and your names for them given in Motors and Sensors Setup.)
Natural Language,             Special,            V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   turnFlashlightOn(flashlightPort, brightness);//Turns on a VEX Flashlight at the specified brightness. \nAcceptable Motor Ports: motor ports 1 through 10,(and your names for them given in Motors and Sensors Setup.) \nNote: Brightness control only available in Motor ports 1 and 10, or 2 through 9 when connected to a VEX Motor Controller 29. \nRange: 0 to 127
Natural Language,             Special,            V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   turnLEDOff(digitalPort);      //Turns a LED Off in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)
Natural Language,             Special,            V2,            feat_LegacyNaturalLanguageActive,       noFeatRest,                   T, B,   turnLEDOn(digitalPort);       //Turns a LED On in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)


Natural Language,             Timing,             NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   wait(quantity, unitType);     //Delays your program by waiting a specified amount of time before processing any additional commands inside of your program. \n quantity: The number of unitType - There is no default value for quantity. \nunitType: seconds (default), milliseconds, minutes.
Natural Language,             Timing,             NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   resetTimer(currentTimer);     //Resets the specified timer back to zero seconds. \ncurrentTimer: The name of one of four (4) timers - timer1 (default), timer2, timer3, timer4.
Natural Language,             Timing,             NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       F, B,   getTimer(currentTimer, unitType);//Returns the value of the specified timer as a decimal (1.23) number in the specified units. This value can be used as a condition for a loop to create timing based actions. \ncurrentTimer: The name of one of four (4) timers - timer1 (default), timer2, timer3, timer4. \nunitType: seconds (default), milliseconds, minutes.

Natural Language,             Line Tracking,      NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   lineTrackLeft(sensorName, threshold, speedPrimary, speedSecondary);//Follow the left edge of a line using the Light Sensor.\nThis command must be inside of a loop in order to work effectively.\nsensorName: Name or port of the Light Sensor. There is no default value. \n threshold: The averaged value (from the line color and background surface)  Default value of 50. \nspeedPrimary: The speed of the motor used to actively follow the line (the leading wheel). Default value of 50. \nspeedSecondary: The speed of the motor used to pivot when following the line (the training wheel). Default value of 0.
Natural Language,             Line Tracking,      NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   lineTrackRight(sensorName, threshold, speedPrimary, speedSecondary);//Follow the right edge of a line using the Light Sensor.\nThis command must be inside of a loop in order to work effectively. \nsensorName: Name or port of the Light Sensor. There is no default value. \n threshold: The averaged value (from the line color and background surface)  Default value of 50. \nspeedPrimary: The speed of the motor used to actively follow the line (the leading wheel). Default value of 50. \nspeedSecondary: The speed of the motor used to pivot when following the line (the training wheel). Default value of 0.

Natural Language,             Competition Control,V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   enableCompetitionMode();      //
Natural Language,             Sensors,            V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   resetSensor(sensorName);      //
Natural Language,             Sensors,            V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   turnLedOn(digitalPort);       //Turns a LED On in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)
Natural Language,             Sensors,            V2,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   turnLedOff(digitalPort);      //Turns a LED Off in the specified digital sensor port. \nAcceptable Sensor Ports: digital ports 1 through 12,(and your names for them given in Motors and Sensors Setup.)

EV3 LED,                      EV3 LED,            E,             noFeatRest,                             noFeatRest,                   T, B,   setLEDColor(LEDpatterns);     //Set the color of the LED on the EV3 from panel.\n\nLED patterns:  One of ledOff, ledGreen, ledRed, ledOrange, ledGreenFlash, ledRedFlash, ledOrangeFlash, ledGreenPulse, ledRedPulse, ledOrangePulse

Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   moveShoulder(quantity, unitType);//
Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   moveElbow(quantity, unitType);//
Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   rotateBase(quantity, unitType);//

Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   moveShoulder(quantity, direction);//
Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   moveElbow(quantity, direction);//
Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             feat_KioskModeActive,         T, B,   rotateBase(quantity, direction);//

Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   openClaw();                   //
Natural Language,             Armbot Commands,    V3,            feat_NaturalLanguageActive,             noFeatRest,                   T, B,   closeClaw();                  //

Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   datalogStart(quantity,unitType);//
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   datalogStop();								 //
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   datalogClear();							 //
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   datalogRate(quantity,unitType);//
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, I,   datalogAddToSeries(series,value);//
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       F, B,   datalogAddToSeries(series,longValue);//
Natural Language,             Datalog,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       F, B,   datalogSetup(series,longValue);//

Natural Language,             Display,            NEV3,          feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displaySensorValues(lineNumber, nDeviceIndex);//
Natural Language,             Display,            NEV3,          feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displayMotorValues(lineNumber, nDeviceIndex);//
Natural Language,             Display,            V3,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displayControllerValues(lineNumber, nJoystickValue);//
Natural Language,             Display,            V3,            feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displayButtonValues(lineNumber, nJoystickValue);//
Natural Language,             Display,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displayVariableValues(lineNumber,value);//
Natural Language,             Display,            NEV2V3,        feat_NaturalLanguageActive,             feat_KioskModeInactive,       T, B,   displayText(lineNumber,sString);//


PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_Deadband[]             //Deadband for motor when under PID control.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_ErrorD[]               //The last derivative error (read only)
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_ErrorI[]               //The current value of the integrated error (read only)
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_ErrorP[]               //The last PID calculated error (read only)
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_kD[]                   //The value of the derivative constant, Kd.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_kI[]                   //The value of the integral constant, Ki.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_kP[]                   //The value of the proportional constant, Kp.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_Period[]               //The PID loop execution period in mS.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   mtrPid_StartEncoder[]         //The encoder count at the start of motion.
PID Control,                  IME Variables,      V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   motorPWMLevel[]               //The actual value of the pwm sent to the motor when under PID control.

Semaphore,                    Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   semaphoreInitialize(nSemaphore);//Initialize a semaphore
Semaphore,                    Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   semaphoreLock(nSemaphore, waitTime);//Wait up to 'waitTime' milliseconds to lock (i.e. get exclusive access) to semaphore 'nSemaphore'
Semaphore,                    Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   semaphoreUnlock(nSemaphore);  //Release a previously locked semaphore.

Sensors,                      Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   clearSensorValue(nSensor);    //Obsolete function. Do not use.
Sensors,                      Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorSensorData(nPort, nDataType, pData);//
Sensors,                      Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorSensorPegCounts(nPort, pData);//
Sensors,                      Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getSensorRawADValue(nPort);   //
Sensors,                      Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setSensorMode(nSensor, mode); //Sets the mode (Raw, percentage, ...) of a sensor. Default mode is usually percentage and sensor will have a value range of 0 to 100.
Sensors,                      Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setSensorType(nSensor, type); //Sets the type (touch, light, sound, sonar, etc) of a sensor
Sensors,                      Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   validColorSensor(nPort);      //
Sensors,                      Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   shiftOut(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay);//Shifts out a byte of data one bit at a time. Starts from either the most or least significant bit. Each bit is written in turn to a data pin, after which a clock pin is pulsed (taken high, then low) to indicate that the bit is available.
Sensors,                      Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   shiftIn(dataPin, clockPin, bBitOrderLSBFirst, nValue, nDelay);//Shifts in a byte of data one bit at a time. Starts from either the most or least significant bit. Each bit is written in turn to a data pin, after which a clock pin is pulsed (taken high, then low) to indicate that the bit is available.

Sensors,                      Bumper Sensor,      V3,            noFeatRest,                             noFeatRest,                   F, B,   getBumperValue(nDeviceIndex); //Returns the value of the Bumper Sensor. \n 1 - Pressed \n 0 - Released
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorBlueChannel(nDeviceIndex);//Returns the value of the Blue Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorGreenChannel(nDeviceIndex);//Returns the value of the Green Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                      Color Sensor,       V3,            noFeatRest,                             noFeatRest,                   F, B,   getColorHue(nDeviceIndex);    //Returns the Hue value (0-255) of the Color Sensor.
Sensors,                      Color Sensor,       V3,            noFeatRest,                             noFeatRest,                   F, B,   getColorName(nDeviceIndex);   //Returns one of 12 color names detected by the color Sensor.\nAcceptable Names: \ncolorRedViolet / colored \ncolorDarkOrange / colorOrange \ncolorDarkYellow / colorYellow\ncolorLimeGreen / colorGreen\ncolorBlueGreen / colorBlue\ncolorDarkBlue / colorViolet\nNo Color Detected: colorNone
Sensors,                      Color Sensor,       V3,            noFeatRest,                             noFeatRest,                   F, A,   getColorProximity(nDeviceIndex);//Returns the proximity value of the color sensor.\nProximity Values have no units.\nLow numbers = far away\nHigher numbers = close
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorRedChannel(nDeviceIndex);//Returns the value of the Red Channel of the Color Sensor (in Hue / Color Mode)
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorSaturation(nDeviceIndex);//Returns the color saturation value of the Color Sensor (in Hue / Color Mode)
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getColorAdvanced(nDeviceIndex, pInfo);//Returns a structure (TColorInfo) containing all information regarding the Color Sensor
Sensors,                      Color Sensor,       V3,            noFeatRest,                             noFeatRest,                   F, B,   getColorGrayscale(nDeviceIndex);//Returns the grayscale value of the Color Sensor (in Grayscale/Line Detection mode only)
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getColorMode(nDeviceIndex);   //Returns the mode setting of the Color Sensor.
Sensors,                      Color Sensor,       V3,            noFeatRest,                             noFeatRest,                   F, B,   getColorValue(nDeviceIndex);  //Returns the value of sensor, depending on mode (Hue/Name/Grayscale)
Sensors,                      Color Sensor,       V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setColorMode(nDeviceIndex, nColorMode);//Sets the mode (Grayscale/Hue/Name) of the Color sensor.

Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, B,   getTouchLEDValue(nDeviceIndex);//Returns the value of Capacitive Touch Sensor on the TouchLED. \n 1 - Pressed \n 0 - Released
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, A,   setTouchLEDBlinkTime(nDeviceIndex, nBlinkOnTime, nBlinkOffTime);//Sets the blinking rate of the TouchLED. \n Blink Time is specified in .05 increments (20 = 1 second)\nSet either blink rate to zero to disable blinking.
Sensors,                      TouchLED Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setTouchLEDBrightness(nDeviceIndex, brightness);//Sets the output brightness of the TouchLED without adjusting the ratios of the R/G/B channels.
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   setTouchLEDColor(nDeviceIndex, nColor);//Sets the output color of the TouchLED using one of 12 color names.\nAcceptable Names: \ncolorRedViolet / colorRed \ncolorDarkOrange / colorOrange \ncolorDarkYellow / colorYellow\ncolorLimeGreen / colorGreen\ncolorBlueGreen / colorBlue\ncolorDarkBlue / colorViolet\nNo Color Detected: colorNone
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, A,   setTouchLEDFade(nDeviceIndex, fadeSetting);//Sets the fading mode of the TouchLED. This allows the touchLED to fade smoothly between colors. Fade modes start with 'colorFade...'
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   setTouchLEDHue(nDeviceIndex, nHueValue);//Sets the output hue value of the TouchLED.
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   setTouchLEDRGB(nDeviceIndex, red, green, blue);//Sets the individual channel values of the TouchLED.\nChannel values range between 0-255
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, S,   getTouchLEDBlue(nDeviceIndex);//Returns the value of the Blue channel of the TouchLED (0-255).
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, S,   getTouchLEDGreen(nDeviceIndex);//Returns the value of the Green channel of the TouchLED (0-255).
Sensors,                      TouchLED Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, S,   getTouchLEDRed(nDeviceIndex); //Returns the value of the Red channel of the TouchLED (0-255).

Sensors,                      Distance Sensor,    V3,            noFeatRest,                             noFeatRest,                   F, B,   getDistanceValue(nDeviceIndex);//Returns the value of the Distance sensor in millimeters (mm).\nThe value returned is based on the mode setting of the Distance sensor (Defaults to Strongest)
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getDistanceAdvanced(nDeviceIndex, pDistanceInfo);//Returns a structure (TDistanceInfo) containing all of the distance sensor values.
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDistanceMaxRange(nDeviceIndex);//Returns the maximum range of the Distance sensor in millimeters (mm).
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDistanceMinRange(nDeviceIndex);//Returns the minimum range of the Distance sensor in millimeters (mm).
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDistanceMostReflective(nDeviceIndex);//Returns the value of the object the Distance sensor determines to be the most reflective (typically the largest) in millimeters.
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDistanceSecondStrongest(nDeviceIndex);//Returns the value of the object the Distance sensor determines to be to be the second strongest (typically the second closest) in millimeters.
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getDistanceStrongest(nDeviceIndex);//Returns the value of the object the Distance sensor determines to be to be the strongest (typically the closest) in millimeters.
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setDistanceBrightnessThreshold(nDeviceIndex, nBrightnessValue);//Sets the Brightness (largest/most reflective) threshold - ranges between 0-100. Defaults to a value of (35).
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setDistanceFilterFactor(nDeviceIndex, nFilterFactor);//Sets the Filter Factor of the distance sensor
Sensors,                      Distance Sensor,    V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   setDistanceMaxRange(nDeviceIndex, nMaxDistanceInMM);//Returns the maximum range of the Distance sensor in millimeters (mm).\nNote setting this value too large may cause the distance sensor to return many false positives.
Sensors,                      Distance Sensor,    V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   setDistanceMinRange(nDeviceIndex, nMinDistanceInMM);//Returns the minimum range of the Distance sensor in millimeters (mm).\nThis value is useful to have the distance sensor ignore object that are too close (like an arm).
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setDistanceObjectFilterMode(nDeviceIndex, nFilterMode);//Sets the Object Filter Mode to adjust what value is returned when using the 'getDistanceValue' command.\nAcceptable Values: strongestSignal,secondStrongestSignal,mostReflective
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setDistanceSNRThreshold(nDeviceIndex, nSNRValue);//Sets the SNR Threshold (signal vs. noise) - ranges between 0-110. Defaults to a value of (19)
Sensors,                      Distance Sensor,    V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setDistanceTransmitPower(nDeviceIndex, nTransmitPower);//Sets the Distance Sensor on or off.\nTransmitPower: 1 = on / 0 = off

Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, B,   getGyroDegrees(nDeviceIndex); //Returns the accumulated value of the Gyro Sensor in degrees.\nDirection can be determined by positive and negative values.
Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, B,   getGyroHeading(nDeviceIndex); //Returns the heading of the Gyro Sensor (0-359) based on last 'reset' point.
Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, A,   getGyroRate(nDeviceIndex);    //Returns the rate of movement of the Gyro Sensor in degrees per second.

Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, B,   getGyroDegreesFloat(nDeviceIndex);//Returns the accumulated value of the Gyro Sensor as a floating point (decimal) value. .\nDirection can be determined by positive and negative values.
Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, B,   getGyroHeadingFloat(nDeviceIndex);//Returns the heading of the Gyro Sensor (0-359) based on last 'reset' point as a floating point (decimal) value.
Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             noFeatRest,                   F, A,   getGyroRateFloat(nDeviceIndex);//Returns the rate of movement of the Gyro Sensor in degrees per second as a floating point value.

Sensors,                      Gyro Sensor,        V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getGyroSensitivity(nDeviceIndex);//Returns the current sensitivity setting of the Gyro Sensor.
Sensors,                      Gyro Sensor,        V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   setGyroSensitivity(nDeviceIndex, range);//Sets the sensitivity of the gyro sensor.\nMore Sensitive gives better accuracy but also can lead to 'missed counts' by moving too quickly.
Sensors,                      Gyro Sensor,        V3,            noFeatRest,                             feat_KioskModeInactive,       T, B,   resetGyro(nDeviceIndex);      //Resets the Gyro Sensor to use it's current position as the 'zero' point.

Sensors,                      Gyro Sensor,        V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getGyroCalibrationFlag(nDeviceIndex)//Returns the flag indicating if calibration of the gyro is in process.
Sensors,                      Gyro Sensor,        V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getGyroOverRangeFlag(nDeviceIndex)//Returns the flag indicating the gyro has rotated faster than the current rate setting. This flag latches (future version will allow you to clear the flag).
Sensors,                      Gyro Sensor,        V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   startGyroCalibration(nDeviceIndex, nCalibrationSetting);//Begins the gyro calibration process for a specific gyro - the calibration setting specifies how many samples to accumulate for the calibration. The gyro should not move during calibration. 2048 samples is the recommended calibration.

Sensors,                      GPS Sensor,         ALL,           feat_NaturalLanguageInActive,           feat_W_DbgTargetVirtualWorld, F, S,   getGPSString(pString);//Retrieve the simple GPS string containing the Latitude, Longitude, Heading, Magnitude, and Time.\n\nThe passed string must be at least 70 characters.\n\nReturns the length of the resulting string.
Sensors,                      GPS Sensor,         ALL,           feat_NaturalLanguageInActive,           feat_W_DbgTargetVirtualWorld, F, S,   getGPSFullString(pString);//Retrieve the simple GPS string containing the Latitude, Longitude, Elevation, Heading, Magnitude, Strength, and Time.\n\nThe passed string must be at least 85 characters.\n\nReturns the length of the resulting string.

// EV3 Touch Sensor Intrinsics
Sensors,                      Touch Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getTouchValue(nDeviceIndex)   //Returns the value of the Touch Sensor plugged into nDeviceIndex
Sensors,                      Touch Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getBumpedValue(sensorPort)    //Returns the number of 'bumps' the sensor has accumulated since the start of the program
Sensors,                      Touch Sensor,       E,             noFeatRest,                             noFeatRest,                   T, B,   resetBumpedValue(sensorPort)  //Resets the number of 'bumps' the sensor has accumulated since the start of the program

// EV3 Color Sensor Intrinsics
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorRGB(nDeviceIndex, pRedChannel, pGreenChannel, pBlueChannel)//Returns the values from the Red, Green, and Blue channels of the color sensor
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorName(nDeviceIndex)    //Returns one of 8 color names, depending on the color detected by the sensor
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorAmbient(nDeviceIndex) //Returns the value measured by the color sensor with its LED turned off
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorReflected(nDeviceIndex)//Returns the value measured by the color sensor with its red LED turned on
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorSaturation(nDeviceIndex)//Returns saturation value: 0 (low saturation) to 100 (high saturation)
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, B,   getColorHue(nDeviceIndex)     //Returns the hue value measured by the color sensor with its LED turned on
Sensors,                      Color Sensor,       E,             noFeatRest,                             noFeatRest,                   F, A,   getColorRawRGB(nDeviceIndex, pRedChannel, pGreenChannel, pBlueChannel)     //Returns the raw sensor values

// EV3 Gyro Sensor Intrinsics
Sensors,                      Gyro Sensor,        E,             noFeatRest,                             noFeatRest,                   T, B,   resetGyro(nDeviceIndex)       //Resets the value of the gyro sensor plugged into nDeviceIndex to use its current position as 'zero degrees.'
Sensors,                      Gyro Sensor,        E,             noFeatRest,                             noFeatRest,                   F, B,   getGyroDegrees(nDeviceIndex)  //Returns the accumulated value of the gyro sensor plugged into nDeviceIndex in degrees.
Sensors,                      Gyro Sensor,        E,             noFeatRest,                             noFeatRest,                   F, B,   getGyroHeading(nDeviceIndex)  //Returns the heading of the gyro sensor plugged into nDeviceIndex based on the last 'reset' point
Sensors,                      Gyro Sensor,        E,             noFeatRest,                             noFeatRest,                   F, B,   getGyroRate(nDeviceIndex)     //Returns the rate of movement for the gyro sensor plugged into nDeviceIndex in degrees per second

// EV3 Ultrasound Sensor Intrinsics
Sensors,                      Ultrasonic Sensor,  E,             noFeatRest,                             noFeatRest,                   F, B,   getUSDistance(nDeviceIndex)   //Returns the distance measured by the Ultrasonic sensor

// EV3 Infrared Sensor Intrinsics
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRDistance(nDeviceIndex)   //Returns the relative distance measured by the sensor, this is dependant on how much light is reflected back to the sensor
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRBeaconDirection(nDeviceIndex)//Returns the relative angle to an IR beacon
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRBeaconChannelDirection(nDeviceIndex, nChannel)//Returns the relative angle to an IR beacon for the specified channel
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRBeaconStrength(nDeviceIndex)//Returns the strength of a detected beacon
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRBeaconChannelStrength(nDeviceIndex, nChannel)//Returns the strength of a detected beacon for the specified channel
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRBeaconAllChannels(nDeviceIndex, pDirections, pStrengths)//Returns the strengths of detected beacons on all channels
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRRemoteButtons(nDeviceIndex)//Returns the number (0 to 11) of the button(s) that is currently depressed on the IR Remote.
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   getIRRemoteChannelButtons(nDeviceIndex, nChannel)//Returns the number (0 to 11) of the button(s) that is currently depressed on the IR Remote for the specified channel
Sensors,                      Infrared Sensor,    E,             noFeatRest,                             noFeatRest,                   F, B,   ev3IRRemoteGetAllChannelsButtons(nDeviceIndex, pButtonData)//Returns the number (0 to 11) of the button(s) that is currently depressed on the IR Remote for all channels


Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   DigitalPinDirection[]         //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   DigitalPinValue[]             //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl1                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl2                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl3                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl4                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl5                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl6                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl7                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl8                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl9                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl10                        //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl11                        //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   dgtl12                        //
Sensors,                      Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getSensorRawADValue[]         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_1                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_2                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_3                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_4                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_5                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_6                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_7                         //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   I2C_8                         //
Sensors,                      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   ifiInterruptPorts[]           //This array is used by the 'sensor and motor setup' wizard to map a regular 'sensor' port with an interrupt port. This is only used for the two types of sensors (sonar sensors and quadrature encoders) that are interrupt based. All the other sensors are non-interrupt based. Both of these sensors use two digital I/O pins; one of which must be a interrupt pin. \n \n
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in1                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in2                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in3                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in4                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in5                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in6                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in7                           //
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   in8                           //
Sensors,                      Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kLastBuiltinNxtSensor         //
Sensors,                      Variables,          NV1,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfPSJoysticks            //Constant. Number of buttons and joystick variables from Playstation 3rd party SOny PlaystationController interface.
Sensors,                      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nAnalogChannelCount           //Contains the number of analog channels on a VEX. The remaining channels will be treated as digital sensors.
Sensors,                      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nPSControl[]                  //Used for optional 3rd party Sony Playstation wireless controller interface. Value of joysticks and buttons
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nPSControl[]                  //Used for optional 3rd party Sony Playstation wireless controller interface. Value of joysticks and buttons
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVirtualSensorModeChanges     //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVirtualSensorTypeChanges     //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   S1                            //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   S2                            //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   S3                            //
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   S4                            //
Sensors,                      Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorBias[]                  //This field is used by the gyro and accelerometer sensors to calculate the 'steady state' raw analog value when the sensor is not moving. When the sensor is first initialized, the ROBOTC firmware spends a few seconds continuously reading the sensor value. The average of these values is the 'bias' value. This calculation allows ROBOTC to calibrate the firmware to the variations in readings that may occur with different battery levels, different temperatures and among different sensors.\n\nThe ROBOTC firmware will use this value in calculating future sensor readings. The instantaneous value of the sensor is the current raw analog value minus the calculated bias value.
Sensors,                      Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorSmallBias[]             //This field is used by the gyro and accelerometer sensors to calculate the remainder 'steady state' raw analog value when the sensor is not moving.
Sensors,                      Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SensorBoolean[]               //Boolean value of a sensor. Depending on sensor type, value may not make sense.
Sensors,                      Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SensorDeadBand[]              //This variable is used with the gyro sensor to eliminate the effect of minor noise.\n\nThe gyro sensor hardware provides an analog reading of instantaneous angular rate of change. The ROBOTC firmware integrates this value (i.e. keeps a cumulative sum of all the instantaneous values) to turn this into an angle. This value is then adjusted and scaled to present it into a value useful to end user (e.g. scale might be 0 to 3599 to represent 0.0 to 359.9 degrees of angle).\n\nThe 'SensorDeadBand' value is used to screen out very small values from the integration. Values less than the dead band are ignored and not used for the calculation.
Sensors,                      Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorFullCount[]             //This value is used on the gyro sensor to indicate the 'full count' of the sensor.\n\nFor example, the gyro might have a scale of 00 to 3599 representing values of 0.0 to 359.9 degrees of angle. In this case the 'sensorFullCount' value is 3600 and represent the upper range for the calculated value. The sensor value is calculated by reporting the calculated value modulo the 'SensorFullCount' value.
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorMode[]                  //Mode of a sensor. Raw, percentage
Sensors,                      Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorRaw[]                   //Raw (un-normalized) value of a sensor. Usually this is the raw Analog value with range 0 to 1023.
Sensors,                      Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorScale[]                 //This value is used on the gyro and accelerometer sensor to adjust the sensor to a scaled range.\n\nFor example, you might want to use a scale of 0000 to 3599 for the gyro representing values of 0.0 to 359.9 degrees of angle.The 'SensorScale' value has been set as a divisor used on the internal calculated value to adjust to this scale. The value is made user visible so that you can adjust to fine tune for your particular sensor.
Sensors,                      Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   SensorSubType[]               //Sensor sub-type. Used for 3rd party sensors. May be obsolete.
Sensors,                      Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorType[]                  //The type of a sensor (touch, light, sonar, etc)
Sensors,                      Variables,          ALL,           noFeatRest,                             noFeatRest,                   F, B,   SensorValue[]                 //Value of a sensor

Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sensorReset(sensorPort);      //Reset the sensor. For EV3 Gyro, it will reset the heading. For EV3 Touch, it will reset bump count. For others, it will reset the current mode to default.
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sensorWriteUART(sensorPort, numbOfBytes, pBytes);//
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setSensorConnectionType(sensorPort, connectionType);//
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getSensorDataset(sensorPort, pData, size);//
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getSensorDatasetSize(sensorPort);//
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setSensorAutoID(sensorPort, bEnable);//
Sensors,                      Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getSensorConnType(nDeviceIndex);//Get Connection type for sensor port.
Sensors,                      Variables,          E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   SensorValueFloat[]            //

// We should consolidate in a future version.
Sensors I2C,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   getI2CSensorData(nSensorIndex, nNumbOfBytes, nBuffer);//ROBOTC firmware automatically polls data from I2C sensor types (i.e. LEGO, HiTechnic and Mindsensors) that are known to the firmware relieving user programs from this task. The data is polled in background on a periodic basis.\n\nThis function is used to copy the last polled data into a buffer in a user program.
Sensors I2C,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readI2CReply(nPort, replyBytes, nBytesToRead);//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readI2CReply(nPort, pReplyBytes, nBytesToRead);//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,                  Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   startI2CDeviceBytesRead(port, nRegisterIndex, nNumbOfBytes);//Initiate reading data from the I2C bus on the indexed port.\n\nport The VexIQ port number\nnRegisterIndex The address of the I2C device\nnNumbOfBytes The number of bytes to read.
Sensors I2C,                  Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   startI2CDeviceBytesWrite(port, nRegisterIndex, pToBuffer, nNumbOfBytes);//Write data to the I2C bus on the indexed port.\n\nport The VexIQ port number\nnRegisterIndex The address of the I2C device\npToBuffer The buffer of data to send, an array of char.\nnNumbOfBytes The number of bytes to send.
Sensors I2C,                  Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   storeI2CDeviceBytesReadFromPortBuffer(port, pToBuffer, nNumbOfBytes);//read data returned from the I2C bus on the indexed port.\n\nUse this function after startI2CDeviceBytesRead has been called and status indicates the I2C bus is not busy.\n\nport The VexIQ port number\npToBuffer The buffer to read data into, an array of char.\nnNumbOfBytes The number of bytes to read.
Sensors I2C,                  Commands,           V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   vexIqGetI2CStatus(port);      //Get the status of the I2C bus on the indexed port.

Sensors I2C,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendI2CMsg(nPort, pSendMsg, nReplySize);//Send an I2C message on the specified sensor port.
Sensors I2C,                  Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendI2CMsg(nPort, sendMsg, nReplySize);//Send an I2C message on the specified sensor port.
Sensors I2C,                  Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bI2CCheckACKs                 //Boolean variable to indicate whether ROBOTC firmware should check for ACK (acknowledgement) after every byte sent to a digital sensor via the I2C messaging protocol. This is the default value and should not need to be changed.\n\nThe standard LEGO firmware only checks for ACKs after the first byte transmitted. This field is provided for compatibility in case some sensors do not properly generate ACKs. This variable is for debugging only.
Sensors I2C,                  Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nI2CBytesReady[]              //Number of queued bytes ready for access from the previous I2C read request.
Sensors I2C,                  Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nI2CRetries                   //The number of re-transmission attempts that should be made for I2C message.
Sensors I2C,                  Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nI2CStatus[]                  //Currents status of an sensor I2C link.

Sensors I2C,                  Commands,           V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   readI2CReply(pReplyBytes, nBytesToRead);//Retrieves the reply bytes from the previous I2C message.
Sensors I2C,                  Commands,           V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendI2CMsg(pSendMsg, nReplySize);//Send an I2C message.
Sensors I2C,                  Commands,           V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getI2CErrorPegs(pPegCounts, nDataSize);//Get statistics about errors on the I2C bus.
Sensors I2C,                  Commands,           V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getI2CStatistics(pStatistics, nDataSize);//Get statistics about the I2C bus.
Sensors I2C,                  Commands,           V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bUseVexI2CEncoderVelocity     //flag that indicates if velocity should be retrieved with encoder position for a VEX IME.
Sensors I2C,                  Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nI2CBytesReady                //Number of queued bytes ready for access from the previous I2C read request.
Sensors I2C,                  Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nI2CStatus                    //Currents status of an sensor I2C link.

Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bXmitComplete(nPort);         //Boolean return value indicates whether transmission is complete on the selected serial port
Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   configureSerialPort(nPort, nMode);//Sets the operational mode of the selected serial port
Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getChar(nPort);               //Gets a single character from the selected serial port. 0x100 indicates no character.
Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sendChar(nPort, nChar);       //Adds a single character to the transmit buffer for the selected serial port
Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setBaudRate(nPort, nBaudRate);//Sets the baud rate for the selected serial port
Serial Link,                  Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getUartConfig(nPort);         //Returns the configuration of the selected UART port.

Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfServos                 //
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   muxUpdateInterval             //Used to set the update interval in milliseconds for the NXT firmware to send servo and motor updates to the servo controller.\n\nThe NXT firmware is continuously updating the servo positions and motor speeds for the controller. This variable specifies how frequently the updates should be sent.\n\nIn general, users should not need to change this value. The default is 20 milliseconds.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   servoChangeRate[]             //Specifies the rate at which an individual servo value is changed. A value of zero indicates servo will move at maximum speed.\n\nThe change rate is a useful variable for 'smoothing' the movement of the servos and preventing jerky motion from software calculated rapid and wide changes in the servo value.\n\nThe default value is a change rate of 10 positions on every servo update which occurs, by default, every 20 milliseconds.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   servoMaxPos[]                 //Specifies the upper limit for servo movement.\n\nNOTE: Not yet implemented.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   servoMinPos[]                 //Specifies the lower limit for servo movement.\n\nNOTE: Not yet implemented.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   servoTarget[]                 //Deprecated. Used to set the position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\nThe firmware will automatically move the servo to this position over the next few update intervals.\n\nAn exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   servoType[]                   //
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   servoValue[]                  //Used to read the current position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\nNOTE: The value returned in this variable is the last position that the firmware has told the servo to move to. This may not be the actual position because the servo may not have finished the movement or the mechanical design may block the servo from fully reaching this position.\n\nTo set the position of a servo, use the 'servo' variable. The firmware will automatically move the servo to this position over the next few update intervals.\n\nA run-time exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   servo[]                       //Used to set the position of the servos on a sensor port Servo MUX controller. Values can range from 0 to 255.\n\nThe firmware will automatically move the servo to this position over the next few update intervals.\n\nAn exception will occur if this variable is accessed and the servo controller is not configured.
Servos,                       Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bSystemLeaveServosEnabledOnProgramStop//Variable to control if the TETRIX Servo Controller will keep the servo motors powered when the program ends.

Smart Radio,                  Commands,           V3,            feat_NaturalLanguageInActive,           feat_VexIQSmartRadioFeaturesActive,F, S,   userMessageAvailable();       //Returns true if there is a user message that is available to be read.
Smart Radio,                  Commands,           V3,            feat_NaturalLanguageInActive,           feat_VexIQSmartRadioFeaturesActive,F, I,   userMessageSize();            //Returns the fixed byte size of a user message packet
Smart Radio,                  Commands,           V3,            feat_NaturalLanguageInActive,           feat_VexIQSmartRadioFeaturesActive,F, S,   readUserMessage(pUserMessage);//Read the available user message. Returns true if read was successful, or false if the read failed.
Smart Radio,                  Commands,           V3,            feat_NaturalLanguageInActive,           feat_VexIQSmartRadioFeaturesActive,F, S,   sendUserMessage(pUserMessage);//Send a user message.
Smart Radio,                  Commands,           V3,            feat_NaturalLanguageInActive,           feat_VexIQSmartRadioFeaturesActive,F, S,   vexIqGetDataPath();           //Returns 0 for no data connection, 1 for USB data connection, or 2 for Smart Radio data connection.

Smart Radio,                  Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bVexIQUseSmartRadioFeatures   //Indicates if the VEX IQ Smart Radio features can be used. Evaluates to true if the Smart Radio features are available.
Smart Radio,                  Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bVexIQSupportsSmartRadio      //Indicates if the firmware on the VEX IQ brain supports the Smart Radio module. Evaluates to true if the Smart Radio is supported.

Sound,                        Commands,           NEV2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   clearSounds();                //Clears all existing and buffered sound commands
Sound,                        Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   ev3StopSound();               //
Sound,                        Commands,           NEV2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   playImmediateTone(frequency, durationIn10MsecTicks);//Immediately play tone at frequency & duration ahead of queued requests.
Sound,                        Commands,           NEV2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   muteSound();                  //Mutes all subsequent sound commands.
Sound,                        Commands,           NEV2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   unmuteSound();                //Restores sound playback volume.
Sound,                        Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   setSoundVolume(volumeLevel);  //Set sound volume level (0..100)
Sound,                        Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getSoundVolume();             //Get sound volume level (0..100)
Sound,                        Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   ev3GetSoundActive();          //

Sound,                        Sounds,             ALL,           feat_WO_DbgTargetVirtualWorld,          feat_KioskModeInactive,       T, B,   playSound(sound);             //Play one of the system predefined sounds (buzz, beep, click, ...
Sound,                        Sounds,             NEV2A,         feat_WO_DbgTargetVirtualWorld,          feat_KioskModeInactive,       T, B,   playTone(frequency, durationIn10MsecTicks);//Plays a constant tone at the specified frequency and duration
Sound,                        Sounds,             NEV2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   playSoundFile(pFileName);     //Plays a sound file from the file system. ROBOTC will automatically download required files with user program.
Sound,                        Sounds,             V3,            feat_WO_DbgTargetVirtualWorld,          feat_KioskModeInactive,       T, B,   playNote(nNote, nOctave, durationIn10MsecTicks);//
Sound,                        Sounds,             V3,            feat_WO_DbgTargetVirtualWorld,          feat_KioskModeInactive,       T, I,   playNoteRaw(nNote);           //
Sound,                        Sounds,             V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   playRepetitiveSound(sound, durationIn10MsecTicks);//

Sound,                        Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bHasSoundDriver               //Boolean variable indicates whether a speaker is connected to the first motor port.
Sound,                        Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bIFISoundTicks                //Boolean variable indicating whether a short 'blip' sound should be played every second.
Sound,                        Variables,          NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bPlaySounds                   //Boolean flag. Indicates whether new sound requests should be accepted or discarded.
Sound,                        Variables,          NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bSoundActive                  //Boolean flag. If true indicates sound system is actively playing sound.
Sound,                        Variables,          NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bSoundQueueAvailable          //Boolean flag. Indicates whether there is space available in the sound queue for another item.
Sound,                        Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kMaxVolumeLevel               //
Sound,                        Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nVolume                       //Sound volume. Range 0 to 4 (loudest).


Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   snprintf(ppDest, nDestLength, pzFormatString);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   snprintf(ppDest, nDestLength, sFormatString);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   snprintf(ppDest, nDestLength, sFormatString, ...);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   snprintf(ppDest, nDestLength, pzFormatString, ...);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(pDest, sFmtSpec, ...);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(ppDest, sFormatString, ...);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(sString, sFormatString);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(sString, sFormatString, ...);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(sDest, pzFormatString, ...);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sprintf(sString, sFormatString);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sprintf(sDest, pzFormatString);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(pzCharsString, pzFormatString, ...);//Used to parse values and parameters into a string (similar to StringFormat).
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sprintf(pzCharsString, pzFormatString);//Used to parse values and parameters into a string (similar to StringFormat).

Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sscanf(sSource, sFormatString);//Used to parse values and parameters out of a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sscanf(sSource, pzFormatString);//Used to parse values and parameters out of a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sscanf(sSource, sFormatString, ...);//Used to parse values and parameters out of a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   sscanf(pzSource, pzFormatString, ...);//Used to parse values and parameters out of a string.

Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strcat(pToBuffer, pFromBuffer);//Function concatenates 'pFromBuffer' onto end of 'pToBuffer'. The variables are arrays of bytes terminated with z aero character. It is user responsibility to ensure that the 'To' array is large enough to hold the result. ROBOTC is not able to do any range checking!\n\nIdentical to the function found in conventional C 'string.h' library.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strcat(sToString, pFromBuffer);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strcatSingleChar(pToBuffer, cSingleChar);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strcmp(pString1, pString2);   //Function compares 'pString1' with 'pString2'. Returns negative value if less than, 0 if equal and positive value if greater than. The variables are arrays of bytes terminated with a zero char.\n\nIdentical to the function found in conventional C 'string.h' library.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strcpy(pToBuffer, pFromBuffer);//Function copies 'pFromBuffer' to 'pToBuffer'. The variables are arrays of bytes terminated with a zero character. It is user responsibility to ensure that the 'To' array is large enough to hold the result. ROBOTC is not able to do any range checking!\n\nIdentical to the function found in conventional C 'string.h' library.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strIndex(sString, nIndex);    //
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringAssign(sDest, nSrce);   //Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringAssign(sDest, sSrce);   //Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringAssign(sDest, pzSrce);  //Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringConcatenate(sDest, nSrce);//Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringConcatenate(sDest, sSrce);//Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringConcatenate(sDest, pzSrce);//Internal -- used by compiler code generator
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringDelete(sDest, nIndex, nSize);//dDletes a substring from a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFind(sSrce, sFindString);//Finds the position in a string of the selected substring
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFind(sSrce, pzFindString);//Finds the position in a string of the selected substring
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFormat(sDest, sFormatString, ...);//Formats a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFormat(sDest, pzFormatString, ...);//Formats a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringFormat(sDest, sFormatString);//Formats a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringFormat(sDest, pzFormatString);//Formats a string

Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFromChars(sToString, sFromChars);//Converts an array of bytes to a string value.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringFromChars(sToString, pFromChars);//Converts an array of bytes to a string value.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringGetAddress(sSrce);      //
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stringGetChar(sSrce, nIndex); //
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   stringSize(sString, nSize);   //Obtains the size of a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strlen(sString);              //Functions returns the size of a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strlen(pString);              //Functions returns the size of a string
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strncat(pToBuffer, pFromBuffer, nMaxBufferSize);//Function concatenates 'pFromBuffer' onto end of 'pToBuffer'. The variables are arrays of bytes terminated with a zero character. nMaxBufferSize is the maximum size of pFromBuffer and is usually created with a sizeof(..) function call.\n\nIdentical to the function found in conventional C 'string.h' library file.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strncatSingleChar(pToBuffer, cSingleChar, nMaxBufferSize);//
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strncmp(pString1, pString2, nMaxBufferSize);//Function compares 'pString1' with 'pString2'. Returns negative value if less than, 0 if equal and positive value if greater than. The variables are arrays of bytes terminated with a zero char. nMaxBufferSize is the maximum number of bytes to compare and is usually created with a sizeof(..) function call.\n\nIdentical to the function found in conventional C 'string.h' library.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strncpy(pToBuffer, pFromBuffer, nMaxBufferSize);//Functions copies 'pFromBuffer' to 'pToBuffer'. The variables are arrays of bytes and not 'string' variables. 'nMaxBufferSize' is the maximum length of the result. Identical to the function found in conventional C 'string.h' library.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strTrim(pString);             //Trims leading and trailing white space (blanks, tab characters) from a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strTrim(sString);             //Trims leading and trailing white space (blanks, tab characters) from a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   strTrimN(pString, nMaxBufferSize);//Trims leading and trailing white space (blanks, tab characters) from a string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   reverseChars(sSrce);          //Reverse all of the characters in a character array or string.
Strings,                      Commands,           NV2V3A,        feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   reverseChars(pSrce);          //Reverse all of the characters in a character array or string.

Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   abortTimeslice();             //Stops the current task time-slice and switches execution to another task.\n\nTasks are given CPU execution time so that highest priority tasks get all the CPU time. If there are multiple tasks with the same highest priority then they are given 'slices' of CPU time in a round robin fashion. This function will immediately end the current timeslice.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   callSub(number);              //Internal.
Task Control,                 Commands,           NV2A,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   endTimeSlice();               //Ends the current task time-slice and allows another task to be rescheduled.
Task Control,                 Commands,           A,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getFileName(nFileIndex, sFileName);//
Task Control,                 Commands,           A,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getFileType(nFileIndex);      //
Task Control,                 Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getIdleTimeProgramIndex();    //
Task Control,                 Commands,           V2A,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getStartupProgramIndex();     //
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getTaskPriority(TaskID);      //Get the priority of the selected task
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getTaskState(TaskID);         //
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   hogCPU();                     //Commits all available CPU time to the current task. No other task will run as long as this task is running (and not waiting).\n\nCondition is removed with a call to 'releaseCPU()' or 'abortTimeslice()'.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   releaseCPU();                 //Cancels, if activated, the 'hogCPU()' function.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   resumeTask(TaskID);           //
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setTaskPriority(TaskID, nTaskPriority);//
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   startTask(TaskID);            //Starts or restarts execution of the specified task. 'TaskID' is the name of the task to start.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   startTask(TaskID, nTaskPriority);//Starts or restarts execution of the specified task. 'TaskID' is the name of the task to start.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stopAllTasks();               //Stops execution of the current program.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   stopTask(TaskID);             //Stops execution of a single task. 'TaskID' is the name of the task to stop.
Task Control,                 Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   suspendTask(TaskID);          //Suspend execution of the selected task. Intended for internal use only.
Task Control,                 Variables,          NV2A,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bClearVariablesOnPgmStart     //
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kDefaultPriority              //Constant. The default priority assigned to a task.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kDefaultTaskPriority          //Constant. The default priority assigned to a task.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kHighPriority                 //Constant. Highest priority that can be assigned to a task.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   kLowPriority                  //Constant. Lowest priority that can be assigned to a task.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nCurrentTask                  //the numerical index of the current task.
Task Control,                 Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nDefaultStackSize             //Internal variable.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nExceptionReports             //Internal variable.
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nMemoryMapAddress             //Internal variable.
Task Control,                 Variables,          NV2A,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nMemoryMapAddressHigh         //Internal variable.
Task Control,                 Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nNxtExitClicks                //
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nOpcodesPerTimeslice          //Used to specify the size of a execution timeslice before switching to another task. User should not normally have to modify this variable.
Task Control,                 Variables,          NV1V2V3A,      feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nRemoteButton                 //
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nSchedulePriority             //The CPU scheduler priority for the current task.\n\nROBOTC shares CPU execution time among various tasks by giving each task a time slice where it will execute a group of instructions.\n\nEach task can be assigned a priority from 0 to 255. The NXT scheduler gives execution time to the highest priority task that is waiting to run. A round robin scheduling scheme is used when there are multiple tasks ready to run all with the highest priority. Lower priority tasks will not execute until there are no tasks of higher priority that are ready to run.\n
Task Control,                 Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nStackSize[]                  //Internal variable.
Task Control,                 Variables,          V1V2A,         feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   programNumber                 //
Task Control,                 Variables,          NV2A,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   pStartOfFlashFileHdr          //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQActiveProgramSlot       //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQIdleTaskCycles          //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQInitTaskCycles          //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQRawTime                 //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQSchedulerSliceSize      //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQUserTaskCycles          //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQSystemTime              //
Task Control,                 Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nVexIQUserTaskTime            //

// Do these ever show? leave for now
TETRIX Controller,            Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   FTCMotor[]                    //Used to set the power level of the two motors on the FTC servo controller.\n\nValues can range from -100 (full reverse) to +100 (full forward).\n\nNote: this is temporary definition for prototype hardware. The production hardware will be integrated with the 'motor' value used for the three motor ports integrated on the NXT and will also include motor encoders.\n\nAn exception will occur if this variable is accessed and the servo controller is not enabled.
TETRIX Controller,            Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   FTCServoControlEnabled        //Boolean variable to indicate whether the FTC servo-motor controller is enabled.\n\nIn general, users do not need to access this variable because the ROBOTC compiler will automatically enable or disable depending on whether the platform type in the ROBOTC IDE is either 'FTC' or otherwise. \n
TETRIX Controller,            Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   FTCServoUsePrototype          //Boolean variable to indicate whether the ROBOTC firmware should use the prototype FTC servo-motor controller hardware or whether they should use a 'software emulation' mode.\n\nThe 'software emulation' mode is for internal testing and allowed development of the servo controller device driver without actually requiring the hardware to be present.
TETRIX Controller,            Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   muxBattery                    //Contains the battery level of the battery connected to the FTC servo-motor controller.\n\nThe battery level ranges from 0 to 15000 and is measured in millivolts.\n\nAn exception will occur if this variable is accessed and the servo controller is not enabled.
TETRIX Controller,            Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   muxLowBatteryShutdown         //

Timing,                       Commands,           ALL,           noFeatRest,                             noFeatRest,                   F, B,   clearTimer(theTimer);         //Resets the value of the specified timer to zero. There are four timers that you can use.
Timing,                       Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   setClockTime(hours, minutes); //Set internal clock hours and minutes. Clock value is lost when controller is powered off.
Timing,                       Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   wait10Msec(nTenMSec);         //Program execution will wait for the specified number of 10-msec ticks.\n\nThere are separate functions for performing 1-msec and 10-msec 'waits' because some ROBOTC platforms only support 16-bit signed numbers. The maximum positive value for this is 32767 and there are cases when you may want to wait longer than this. In this case you can use the 'wait10Msec' function for very long delays.
Timing,                       Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   wait1Msec(nMSec);             //Program execution will wait for the specified number of 1-millisecond ticks.
Timing,                       Commands,           ALL,           noFeatRest,                             noFeatRest,                   F, B,   sleep(nMSec);                 //Program execution will wait/sleep for the specified number of 1-millisecond ticks.
Timing,                       Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   delay(nMSec);                 //Program execution will wait/sleep for the specified number of 1-millisecond ticks.
Timing,                       Commands,           ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   noOp();                       //A command used to execute no operations for the length of time of a single instruction. Used for timing purposes.
Timing,                       Commands,           E,             feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   getMicroTimer();              //Get a microsecond tick counter
Timing,                       Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nClockMinutes                 //Returns the number of minutes on the system clock
Timing,                       Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nPgmTime                      //Value of the user program elapsed timer in 1-millisecond ticks (wraps around).\n\nThis timer is different from the 'nSysTime' variable in that it does not increment when single stepping program execution via the debugger.
Timing,                       Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nSysTime                      //Value of the system timer in 1-millisecond ticks (wraps around)
Timing,                       Variables,          ALL,           noFeatRest,                             noFeatRest,                   F, I,   time100[]                     //Value of the specified timer in 100-millisecond ticks (max 3276.7 seconds). There are four timers that you can use.
Timing,                       Variables,          ALL,           noFeatRest,                             noFeatRest,                   F, I,   time10[]                      //Value of the specified timer in 10-millisecond ticks (max 327.67 seconds). There are four timers that you can use.\n\nOn ROBOTC platforms that do not support 'long' variable types, the maximum value of a timer  is 32,767 ticks or 327.67 seconds. This is the largest positive value that can be stored in a 16-bit signed integer.
Timing,                       Variables,          ALL,           noFeatRest,                             noFeatRest,                   F, B,   time1[]                       //Value of the specified timer in 1-millisecond ticks. There are four timers that you can use.\n\nOn ROBOTC platforms that do not support 'long' variable types, the maximum value of a timer  is 32,767 ticks or milliseconds. This is the largest positive value that can be stored in a 16-bit signed integer. On these platforms, you can use 'time10' and 'time100' built-in variables to manage larger time durations.

// Many obsolete functions here from the PIC days.  A few still apply to the cortex
VEX Competition Control,      Commands,           V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   #pragma autonomousDuration(<nDuration>)//#pragma' directive used for the IFI platforms to modify the duration used for the autonomous period of a competition. \n'nDuration' is the duration (in seconds) to use.
VEX Competition Control,      Commands,           V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   #pragma competitionControl(<state>)//#pragma' directive used for the IFI platforms to flag whether a program is being used for competition or autonomous operation. \n 'state' indicates one of the following: \n 'off' The robot controller will be configured for 'autonomous' operation \n'Competition' The robot controller will be configured for standard competition. \n'AutonomousTest' The robot controller will be configured for testing the autonomous phase of a competition. The user phase duration will be zero. \n'UserTest' The robot controller will be configured for testing the user control phase of a competition. The autonomous duration will be zero
VEX Competition Control,      Commands,           V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   #pragma userControlDuration(<nDuration>)//#pragma' directive used for the IFI platforms to modify the duration used for the user control period of a competition. \n'nDuration' is the duration (in seconds) to use.
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bIfiRobotDisabled             //Boolean variable to indicate whether robot is currently in disabled competition mode.
VEX Competition Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bIfiAutonomousMode            //Boolean variable to indicate whether robot is currently in autonomous or competition mode.\n\nIn autonomous mode, the robot can be freely 'controlled' by software whether or not the robot's RF channel to base transmitter (VEX) or Operator Interface (FRC) is operational.\n\nIn competition mode, the robot software is configured for a  two phase robot competition: an initial autonomous operation phase where joystick values are masked followed by a 'user control' phase where the robot is controlled by the base station joysticks.
VEX Competition Control,      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bIfiAutonomousPhase           //Boolean variable that to indicate during a robot competition whether robot is in the 'autonomous' or 'user controlled' phase. This variable is only valid when the variable 'bIfiAutonomousMode' is 'false'.
VEX Competition Control,      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bIfiPwmOverride               //Boolean flag to override the IFI robot controller PWM controller. Normally the PWM control is disabled (i.e. returns to zero power) when the FR channel link to the controller is lost.
VEX Competition Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bIfiAutonomousModeBySlave     //
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bVexAutonomousMode            //Backwards compatibility with VEX. Replaced by the variable 'bIfiAutonomousMode'
VEX Competition Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nCurrCortexProgramType        //The current type of program that is running./nThis indicates standalone, VEXnet or competition modes.
VEX Competition Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   nNextCortexProgramType        //The next type of program that will run after the cortex is power cycled./nThis indicates standalone, VEXnet or competition modes.
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   nIfiCompetitionState          //Enum variable to indicate whether robot is 'disabled', 'autonomous' or 'user control'.
VEX Competition Control,      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nIfiUserCmd                   //Internal use only
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nVEXDurationAutonomous        //Sets the numeric value (in seconds) of the autonomous phase of a competition. The value can only be set once and will subsequently be 'latched'.
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nVEXDurationUserControl       //Sets the numeric value (in seconds) of the user control phase of a competition. The value can only be set once and will subsequently be 'latched'.
VEX Competition Control,      Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nVexRCReceiveState            //Numeric value containing the current state of the FR transmitter channel.
VEX Competition Control,      Variables,          V2,            feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   nVexRCReceiveState            //Current state of the VEXnet joysticks and competition mode.
VEX Competition Control,      Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   bVEXNETActive                 //Boolean flag indicating whether VEXNET WiFi or legacy 75 MHZ RF wireless transmission is used.

// These functions are from the Vex_Competition_Includes.c file and used to show under "user defined"
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   allMotorsOff();               //Stop all motors
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   allTasksStop();               //Stop all running tasks except main
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   displayStatusAndTime(reset);  //An internal function to display competition status and elapsed time on the VEX LCD.  Call every 100mS to show accurate elapsed time.
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   UserControlCodePlaceholderForTesting();//A test function for driver control, all this function does is show elapsed time.
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   AutonomousCodePlaceholderForTesting();//A test function for autonomous, all this function does is show elapsed time.
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bStopTasksBetweenModes        //If true then tasks that were started by the user are stopped when the robot is disabled after either the autonomous or driver control period.
VEX Competition Control,      competition_include,V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   bDisplayCompetitionStatusOnLcd//If true then the competition template will show status on the VEX LCD when the robot is disables and also when the place holder autonomous and driver control functions are called.

VEX Remote Control,           Commands,           V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   getJoystickValue(channel);    //Get the current value of a specific channel or button from the VEX Game Controller
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   frcOIJoystickButtons[]        //Array that contains the values of the joystick buttons from an FRC OI base transmitter.
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, A,   frcOILEDs[]                   //FRC operator Interface 'Robot Feedback' LED control
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   frcRF[]                       //Array that contains the values of the analog joysticks from an FRC RF base transmitter.
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kNumbOfFrcRFJoysticks         //Constant containing the number of analog joystick channels on a FRC operator interface
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kNumbOfOIJoystickButtons      //Constant containing the number of joystick buttons on a FRC OI remote
VEX Remote Control,           Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kNumbOfOISensors              //Constant containing the number of analog joystick channels on a FRC OI remote
VEX Remote Control,           Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kNumbOfVexPSJoysticks         //
VEX Remote Control,           Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, S,   kNumbOfVexRFJoysticks         //Constant containing the number of analog joystick channels on a VEX RF handheld remote
VEX Remote Control,           Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nIfiSPIMsgCounts              //Variable counts the number of SPI messages received by the user CPU from the master CPU.
VEX Remote Control,           Variables,          V1V2,          feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVexSPIMsgCounts              //Backwards compatibility with VEX. Replaced by the variable 'nIfiSPIMsgCounts'
VEX Remote Control,           Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   vexPSC[]                      //Provides access to a playstation controller joysticks and buttons when connected to a VEX.
VEX Remote Control,           Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, B,   vexRT[]                       //Get the current value of a specific channel or button from the VEX Game Controller

// These make no sense.  They are visible for NXT, under VEX IQ but all Internal.  To be revised
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuInitialize();             //
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuSetTitle(pTitleText);     //
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuSetProgramName(pProgramName);//
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuRepaint();                //
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuScroll(bScrollDown);      //
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuGetSelection();           //
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuAddItem(nMenuID, pMenuText);//
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuUpdateCommandText(nMenuID, pMenuText);//
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   menuIsCommandVisible(nMenuID, pMenuText);//
VEX IQ Chooser,               Commands,           N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setInitialProgramRunningScreen();//
VEX IQ Chooser,               Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bUserWantsExitButton          //
VEX IQ Chooser,               Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   vexIQChooserState             //

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Everything below this line is an internal variable and should be marked with the menu level I
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// Symbols
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _DEBUG                        //Internal variables.
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _TARGET                       //Internal variables.
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _CUSTOM                       //Internal variables.
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _RELEASE                      //Internal variables.
Preprocessor Defines,         Variables,          A,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   Ard                           //Internal variables.
Preprocessor Defines,         Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   FTC                           //Internal variables.
Preprocessor Defines,         Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   IFI                           //Internal variables.
Preprocessor Defines,         Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   NXT                           //Internal variables.
Preprocessor Defines,         Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   VEX                           //Internal variables.
Preprocessor Defines,         Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   VEX2                          //Internal variables.
Preprocessor Defines,         Variables,          V1V2V3,        feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   VexIQ                         //Internal variables.m type for the current compilation
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ROBOTC                        //Internal variables.
Preprocessor Defines,         Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ROBOTC_Version                //Internal variables.

// Natural language functions we want to hide
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   lowLevelMoveDistance(quantity, nLeftSpeed, nRightSpeed, nUnitType);//
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   lowLevelMoveTiming(quantity, nLeftSpeed, nRightSpeed, nUnitType);//
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setMotorSpeeds(nRightSideSpeed, nLeftSideSpeed);//
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   updateMotorDriveTrain();      //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   updateMotorEncoderScale();    //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setRobotType(robotType);      //

// Natural language globals for every platform we want to hide
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   noMotor                       //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   noMotorOnPort                 //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bPopulatedMotorDriveSides     //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   internalLeftMotors            //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   internalRightMotors           //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nGlobalJoyScaledValue         //

// From NatLang_Cortex.c
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   setPIDEnableForDrivetrain(bEnable);//
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   monitorCompetitionFlags();    //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   toggleMainTask();             //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getCompetitionAutonomous();   //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getCompetitionDriverControl();//

Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   noEncoderOnPort               //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   fMotorScaleRatio[]            //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bMotorI2CBased[]              //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   compCurrentMode               //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   compPreviousMode              //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bAutonomousOneTimeFlag        //

// From NatLang_NXT.c
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getMotorTargetCompleted(nMotorIndex);//

// Internal for VexIQ
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nSensorWorkBetweenCyclesCounter//
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVexIQUserTaskCurrTimeIncrementalTicks//
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVexIQUserTaskCurrTimeSliceTotalTicks//
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVexIQUserTaskStartTick       //
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bVexIQI2CForceInlineWait      //
Internal,                     Variables,          V3,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nVexIQI2CSafeSendMessageTime  //

// Internal for NXT
Internal,                     Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfBrickName              //
Internal,                     Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfBtAddr                 //
Internal,                     Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfBtName                 //
Internal,                     Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfBtPincode              //
Internal,                     Variables,          N,             feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfClassOfDevice          //

// Internal
Internal,                     Variables,          ALL,           feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   opcdBAD                       //
Internal,                     Variables,          V1,            feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   vexInterruptPorts[]           //

// Joystick driver
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   joy1Btn(btn);                 //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   joy1Pov(povDirection);        //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   joy2Btn(btn);                 //
Internal,                     Commands,           ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   readMsgFromPC();              //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   joystick                      //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bDisconnected                 //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bJoystickDriverStarted        //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bOverrideJoystickDisabling    //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   joystickCopy                  //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kJoystickQueueID              //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nNoMessageCounter             //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nNoMessageCounterLimit        //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ntotalMessageCount            //

// internal datalog
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue0                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue1                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue2                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue3                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue4                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue5                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue6                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogValue7                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogUpdate                //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogSemaphore             //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogUpdateInterval        //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogUpdatePeriod          //
Internal,                     Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   _datalogPollingTask();        //

// internal display
Internal,                     Display,            ,              noFeatRest,                             feat_KioskModeInactive,       F, I,   _displayVariableValues(lineNumber,name,floatValue);//Internal use only

// From buildOptions Files
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   LoadBuildOptions__H_          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   romtype                       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ramtype                       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   neartype                      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ramfunc                       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   no_init                       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   inline                        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasSupportForMessagingWithRobotcIDE//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   optionalExceptions            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   optionalBreakpoints           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   optionalDebugSupport          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   optionalSwitchOpcodes         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasOptionalUploadSupport      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasBulkUploadlupport          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasDeviceUploadSupport        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   optionalTrinaryOpcodes        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasOpcodeStateMachine        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useFloats                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useLongs                      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useStackVariables             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSystemClockSpeed             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bFirmwareStoresMotorType      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bFirmwareStoresMotorDriveSide //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bIncludeMotorTypeInUploadMessage//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bMotorMirroring               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bMotorsWithEncoders           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bMotorsWithCurrentLimiting    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSmartMotorsWithEncoders      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfDefaultPidSettingsTable//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bAssociateMotorWithEncoderSensor//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasEncoderTimeStamp          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasEncoderVelocity           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bAssociateMotorWithIOPins     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bIncludeMotorEncoderInUploadMessage//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSupportsSoftwareBasedMotorPWM//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSupportsSoftwareBasedServoPWM//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasHardwareAutoDetectionMotors//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasHardwareAutoDetectionSensors//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoundSupport              //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoundVolume               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasPlayMusicalNotes          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoundsInRomChip           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoundDriverOnOff          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoundFiles                //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasZigBeeFeatureSpare0       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasZigBeeFeatureSpare1       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasZigBeeFeatureSpare2       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfZigBeeMessageBuffers   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfTasks                  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfGlobalVariablesInBytes //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfPrograms               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSpareA01                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfRealMotors             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfRealServos             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfVirtualSensors         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfVirtualMotors          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSupportsInvokeBootloaderOpcode//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSupportsFlashWriteOpcodes    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSpareFlagABC                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSupportsRAMWriteOpcodes      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasFlashFileSystem           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasFlashFileSystemDelete     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kMaxNumbofFlashFiles          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kVTOCItemSize                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   StoreRobotNameInPersistentData//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bStoreStartupUARTTypesInPersistentData//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfFlashMemoryPtr         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfRAMMemoryPtrInHW       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bDebugAddressAlignment        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasCamera                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasJoystickDownloadMessageOpcodes//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasJoystickUploadMessageOpcodes//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasHarvardArchitecture        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasMemMoveSupport             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasMemCmpSupport              //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasStringSupport              //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   has_sscanf_Support            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasDebugStreamSupport         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kDebugStreamDefaultBufferSize //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasTranscendentalSupport      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasDatalog                   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kDatalogDefaultBufferSize     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasDatalogSave               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasMessageStatistics         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   TETRIX_CAPABLE                //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasAlphaNumericLCDDisplayViaUART//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasLCDGraphicsDisplay        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasLCDMenuFunctions           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bPixelByteContainsColumnData  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasLCDBacklight               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kScreenWidth                  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kScreenHeight                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kFirstVisibleScreenRow        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasLCDButtons                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasStatusLEDs                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasLCDContrast               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasRemoteButtons             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bUseLookupBreakpointTableInRAM//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasFloatDuringInactivePWM    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nnRobotType                   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasServoSpecificSourceTypes  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSourceTypeSensorRawValue  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSourceTypeSensorMode      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nUploadSensorValueType        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasWatchDogTimerFunctions     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasClearFlashOpcodes         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasSpareOption9               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfTLargeValue            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasReadBatteryVoltage        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasStandardBatteryMonitoring //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoftwareControlledPowerOnOff//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSoftwareControlledPowerOnOffTiming//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   UNUSED__23                    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasShiftOutOpcode            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasRandomFunctions           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasBulkClearSensorFunction   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasBulkClearMotorFunction    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   sensorHandlerWorkBetweenOpcodes//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSoftwareMustStartADCConversionCycle//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useSimpleADCArrayLookup       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   includeSonarSensorSupportTwoPins//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   includeSonarSensorSupportOnePin//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   includeEncoderSensorSupport   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   includeGyroAndAccelSupport    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nGyroJitterRange              //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSensorBiasSettings        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasI2CPort                   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasDaisyChainedI2C           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   nFirstAutoDaisyChainI2CAddress//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasGetSensorRawADValue       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasFastSonarSensor           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSystemTaskForUserProgramComplete//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasSemaphoreSupport          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kReceivedOpcodeSize           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bGetClearVariablesOnPgmStart  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasPropertyOpcodes           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasDriveTrainConfiguration    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasJoystickAxisConfiguration  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasMotorOpcodes               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   platformDriversBufferOutgoingSerialData//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   platformDriversBufferIncomingSerialData//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   DelayTimeForStartupProgram    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption16                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption17                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption18                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption19                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption20                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption21                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption22                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption23                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   spareOption24                 //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bUserMessagesAllowed          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasMultRobotNetworking       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSystemUARTSupportsZigBee     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasZigBeeSupport             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kStartOfFileSystem            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kStartOfBootloader            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasDivideByZeroException     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare1         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare2         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare3         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare4         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare5         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare6         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare7         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare8         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare9         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare10        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare11        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare12        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare13        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare14        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   loadBuildOptionSpare15        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useFastMemoryHandlers         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   SystemUartPortCanBeReconfigured//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   hasUserSerialPorts            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   getNumbOfSerialPorts          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   flipUART0_And_UART1           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfXmitUartBuffer         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSizeOfRcvUartBuffer          //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ARMCPU                        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   AVRCPU                        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   STM8CPU                       //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   Spare1CPU                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   Spare2CPU                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   Spare3CPU                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   useParmForCurrOpPtr           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bSpare199                     //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfBreakpoints            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kSoundQueueSize               //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kMaxTimeBetweenMessageChars   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kRamBaseAddr                  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbAnalogSensors            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbDigitalSensors           //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbSensorsOnI2CPorts        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kMaxNumbofComplicatedSensors  //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kNumbOfRealSensors            //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kMaxBytesPerDataBytesUpload   //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bUsesFlashStorage             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kFlashSectorSize              //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kStoreRobotNameInPersistentData//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasEvents                    //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kTotalCallSubStackSize        //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kTotalVariablesStackSize      //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kConstantPoolSize             //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   ArduinoSmallMemoryCPU         //
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   kCyclesBetweenSensorWorkChecks//
Build Option,                 Variables,          ,              feat_NaturalLanguageInActive,           noFeatRest,                   F, I,   bHasUserMessaging             //


